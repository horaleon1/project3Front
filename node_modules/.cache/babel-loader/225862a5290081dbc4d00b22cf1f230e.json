{"ast":null,"code":"/*\n Copyright 2012-2015, Yahoo Inc.\n Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.\n */\nconst util = require('util');\n\nconst path = require('path');\n\nconst fs = require('fs');\n\nconst mkdirp = require('make-dir');\n\nconst supportsColor = require('supports-color');\n\nconst isAbsolute = path.isAbsolute ||\n/* istanbul ignore next */\nfunction (p) {\n  return path.resolve(p) === path.normalize(p);\n};\n/**\n * abstract interface for writing content\n * @class ContentWriter\n * @constructor\n */\n\n/* istanbul ignore next: abstract class */\n\n\nfunction ContentWriter() {}\n/**\n * writes a string as-is to the destination\n * @param {String} str the string to write\n */\n\n/* istanbul ignore next: abstract class */\n\n\nContentWriter.prototype.write = function () {\n  throw new Error('write: must be overridden');\n};\n/**\n * returns the colorized version of a string. Typically,\n * content writers that write to files will return the\n * same string and ones writing to a tty will wrap it in\n * appropriate escape sequences.\n * @param {String} str the string to colorize\n * @param {String} clazz one of `high`, `medium` or `low`\n * @returns {String} the colorized form of the string\n */\n\n\nContentWriter.prototype.colorize = function (str\n/*, clazz*/\n) {\n  return str;\n};\n/**\n * writes a string appended with a newline to the destination\n * @param {String} str the string to write\n */\n\n\nContentWriter.prototype.println = function (str) {\n  this.write(str + '\\n');\n};\n/**\n * closes this content writer. Should be called after all writes are complete.\n */\n\n\nContentWriter.prototype.close = function () {};\n/**\n * a content writer that writes to a file\n * @param {Number} fd - the file descriptor\n * @extends ContentWriter\n * @constructor\n */\n\n\nfunction FileContentWriter(fd) {\n  this.fd = fd;\n}\n\nutil.inherits(FileContentWriter, ContentWriter);\n\nFileContentWriter.prototype.write = function (str) {\n  fs.writeSync(this.fd, str);\n};\n\nFileContentWriter.prototype.close = function () {\n  fs.closeSync(this.fd);\n};\n/**\n * a content writer that writes to the console\n * @extends ContentWriter\n * @constructor\n */\n\n\nfunction ConsoleWriter() {}\n\nutil.inherits(ConsoleWriter, ContentWriter); // allow stdout to be captured for tests.\n\nlet capture = false;\nlet output = '';\n\nConsoleWriter.prototype.write = function (str) {\n  if (capture) {\n    output += str;\n  } else {\n    process.stdout.write(str);\n  }\n};\n\nConsoleWriter.prototype.colorize = function (str, clazz) {\n  const colors = {\n    low: '31;1',\n    medium: '33;1',\n    high: '32;1'\n  };\n  /* istanbul ignore next: different modes for CI and local */\n\n  if (supportsColor.stdout && colors[clazz]) {\n    return '\\u001b[' + colors[clazz] + 'm' + str + '\\u001b[0m';\n  }\n\n  return str;\n};\n/**\n * utility for writing files under a specific directory\n * @class FileWriter\n * @param {String} baseDir the base directory under which files should be written\n * @constructor\n */\n\n\nfunction FileWriter(baseDir) {\n  if (!baseDir) {\n    throw new Error('baseDir must be specified');\n  }\n\n  this.baseDir = baseDir;\n}\n/**\n * static helpers for capturing stdout report output;\n * super useful for tests!\n */\n\n\nFileWriter.startCapture = function () {\n  capture = true;\n};\n\nFileWriter.stopCapture = function () {\n  capture = false;\n};\n\nFileWriter.getOutput = function () {\n  return output;\n};\n\nFileWriter.resetOutput = function () {\n  output = '';\n};\n/**\n * returns a FileWriter that is rooted at the supplied subdirectory\n * @param {String} subdir the subdirectory under which to root the\n *  returned FileWriter\n * @returns {FileWriter}\n */\n\n\nFileWriter.prototype.writerForDir = function (subdir) {\n  if (isAbsolute(subdir)) {\n    throw new Error('Cannot create subdir writer for absolute path: ' + subdir);\n  }\n\n  return new FileWriter(this.baseDir + '/' + subdir);\n};\n/**\n * copies a file from a source directory to a destination name\n * @param {String} source path to source file\n * @param {String} dest relative path to destination file\n * @param {String} [header=undefined] optional text to prepend to destination\n *  (e.g., an \"this file is autogenerated\" comment, copyright notice, etc.)\n */\n\n\nFileWriter.prototype.copyFile = function (source, dest, header) {\n  if (isAbsolute(dest)) {\n    throw new Error('Cannot write to absolute path: ' + dest);\n  }\n\n  dest = path.resolve(this.baseDir, dest);\n  mkdirp.sync(path.dirname(dest));\n  let contents;\n\n  if (header) {\n    contents = header + fs.readFileSync(source, 'utf8');\n  } else {\n    contents = fs.readFileSync(source);\n  }\n\n  fs.writeFileSync(dest, contents);\n};\n/**\n * returns a content writer for writing content to the supplied file.\n * @param {String|null} file the relative path to the file or the special\n *  values `\"-\"` or `null` for writing to the console\n * @returns {ContentWriter}\n */\n\n\nFileWriter.prototype.writeFile = function (file) {\n  if (file === null || file === '-') {\n    return new ConsoleWriter();\n  }\n\n  if (isAbsolute(file)) {\n    throw new Error('Cannot write to absolute path: ' + file);\n  }\n\n  file = path.resolve(this.baseDir, file);\n  mkdirp.sync(path.dirname(file));\n  return new FileContentWriter(fs.openSync(file, 'w'));\n};\n\nmodule.exports = FileWriter;","map":null,"metadata":{},"sourceType":"script"}