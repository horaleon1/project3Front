{"ast":null,"code":"webpackJsonpreact_tradingview_widget([0], [\n/* 0 */\n\n/***/\nfunction (module, exports) {\n  // shim for using process in browser\n  var process = module.exports = {}; // cached from whatever global is present so that test runners that stub it\n  // don't break things.  But we need to wrap it in a try catch in case it is\n  // wrapped in strict mode code which doesn't define any globals.  It's inside a\n  // function because try/catches deoptimize in certain engines.\n\n  var cachedSetTimeout;\n  var cachedClearTimeout;\n\n  function defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n  }\n\n  function defaultClearTimeout() {\n    throw new Error('clearTimeout has not been defined');\n  }\n\n  (function () {\n    try {\n      if (typeof setTimeout === 'function') {\n        cachedSetTimeout = setTimeout;\n      } else {\n        cachedSetTimeout = defaultSetTimout;\n      }\n    } catch (e) {\n      cachedSetTimeout = defaultSetTimout;\n    }\n\n    try {\n      if (typeof clearTimeout === 'function') {\n        cachedClearTimeout = clearTimeout;\n      } else {\n        cachedClearTimeout = defaultClearTimeout;\n      }\n    } catch (e) {\n      cachedClearTimeout = defaultClearTimeout;\n    }\n  })();\n\n  function runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n      //normal enviroments in sane situations\n      return setTimeout(fun, 0);\n    } // if setTimeout wasn't available but was latter defined\n\n\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n      cachedSetTimeout = setTimeout;\n      return setTimeout(fun, 0);\n    }\n\n    try {\n      // when when somebody has screwed with setTimeout but no I.E. maddness\n      return cachedSetTimeout(fun, 0);\n    } catch (e) {\n      try {\n        // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n        return cachedSetTimeout.call(null, fun, 0);\n      } catch (e) {\n        // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n        return cachedSetTimeout.call(this, fun, 0);\n      }\n    }\n  }\n\n  function runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n      //normal enviroments in sane situations\n      return clearTimeout(marker);\n    } // if clearTimeout wasn't available but was latter defined\n\n\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n      cachedClearTimeout = clearTimeout;\n      return clearTimeout(marker);\n    }\n\n    try {\n      // when when somebody has screwed with setTimeout but no I.E. maddness\n      return cachedClearTimeout(marker);\n    } catch (e) {\n      try {\n        // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n        return cachedClearTimeout.call(null, marker);\n      } catch (e) {\n        // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n        // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n        return cachedClearTimeout.call(this, marker);\n      }\n    }\n  }\n\n  var queue = [];\n  var draining = false;\n  var currentQueue;\n  var queueIndex = -1;\n\n  function cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n      return;\n    }\n\n    draining = false;\n\n    if (currentQueue.length) {\n      queue = currentQueue.concat(queue);\n    } else {\n      queueIndex = -1;\n    }\n\n    if (queue.length) {\n      drainQueue();\n    }\n  }\n\n  function drainQueue() {\n    if (draining) {\n      return;\n    }\n\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n    var len = queue.length;\n\n    while (len) {\n      currentQueue = queue;\n      queue = [];\n\n      while (++queueIndex < len) {\n        if (currentQueue) {\n          currentQueue[queueIndex].run();\n        }\n      }\n\n      queueIndex = -1;\n      len = queue.length;\n    }\n\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n  }\n\n  process.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n\n    if (arguments.length > 1) {\n      for (var i = 1; i < arguments.length; i++) {\n        args[i - 1] = arguments[i];\n      }\n    }\n\n    queue.push(new Item(fun, args));\n\n    if (queue.length === 1 && !draining) {\n      runTimeout(drainQueue);\n    }\n  }; // v8 likes predictible objects\n\n\n  function Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n  }\n\n  Item.prototype.run = function () {\n    this.fun.apply(null, this.array);\n  };\n\n  process.title = 'browser';\n  process.browser = true;\n  process.env = {};\n  process.argv = [];\n  process.version = ''; // empty string to avoid regexp issues\n\n  process.versions = {};\n\n  function noop() {}\n\n  process.on = noop;\n  process.addListener = noop;\n  process.once = noop;\n  process.off = noop;\n  process.removeListener = noop;\n  process.removeAllListeners = noop;\n  process.emit = noop;\n  process.prependListener = noop;\n  process.prependOnceListener = noop;\n\n  process.listeners = function (name) {\n    return [];\n  };\n\n  process.binding = function (name) {\n    throw new Error('process.binding is not supported');\n  };\n\n  process.cwd = function () {\n    return '/';\n  };\n\n  process.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n  };\n\n  process.umask = function () {\n    return 0;\n  };\n  /***/\n\n},\n/* 1 */\n\n/***/\nfunction (module, exports, __webpack_require__) {\n  \"use strict\";\n  /**\n   * Copyright (c) 2013-present, Facebook, Inc.\n   *\n   * This source code is licensed under the MIT license found in the\n   * LICENSE file in the root directory of this source tree.\n   *\n   * \n   */\n\n  function makeEmptyFunction(arg) {\n    return function () {\n      return arg;\n    };\n  }\n  /**\n   * This function accepts and discards inputs; it has no side effects. This is\n   * primarily useful idiomatically for overridable function endpoints which\n   * always need to be callable, since JS lacks a null-call idiom ala Cocoa.\n   */\n\n\n  var emptyFunction = function emptyFunction() {};\n\n  emptyFunction.thatReturns = makeEmptyFunction;\n  emptyFunction.thatReturnsFalse = makeEmptyFunction(false);\n  emptyFunction.thatReturnsTrue = makeEmptyFunction(true);\n  emptyFunction.thatReturnsNull = makeEmptyFunction(null);\n\n  emptyFunction.thatReturnsThis = function () {\n    return this;\n  };\n\n  emptyFunction.thatReturnsArgument = function (arg) {\n    return arg;\n  };\n\n  module.exports = emptyFunction;\n  /***/\n},\n/* 2 */\n\n/***/\nfunction (module, exports, __webpack_require__) {\n  \"use strict\";\n  /* WEBPACK VAR INJECTION */\n\n  (function (process) {\n    /**\n    * Copyright (c) 2013-present, Facebook, Inc.\n    *\n    * This source code is licensed under the MIT license found in the\n    * LICENSE file in the root directory of this source tree.\n    *\n    */\n\n    /**\n     * Use invariant() to assert state which your program assumes to be true.\n     *\n     * Provide sprintf-style format (only %s is supported) and arguments\n     * to provide information about what broke and what you were\n     * expecting.\n     *\n     * The invariant message will be stripped in production, but the invariant\n     * will remain to ensure logic does not differ in production.\n     */\n    var validateFormat = function validateFormat(format) {};\n\n    if (process.env.NODE_ENV !== 'production') {\n      validateFormat = function validateFormat(format) {\n        if (format === undefined) {\n          throw new Error('invariant requires an error message argument');\n        }\n      };\n    }\n\n    function invariant(condition, format, a, b, c, d, e, f) {\n      validateFormat(format);\n\n      if (!condition) {\n        var error;\n\n        if (format === undefined) {\n          error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');\n        } else {\n          var args = [a, b, c, d, e, f];\n          var argIndex = 0;\n          error = new Error(format.replace(/%s/g, function () {\n            return args[argIndex++];\n          }));\n          error.name = 'Invariant Violation';\n        }\n\n        error.framesToPop = 1; // we don't care about invariant's own frame\n\n        throw error;\n      }\n    }\n\n    module.exports = invariant;\n    /* WEBPACK VAR INJECTION */\n  }).call(exports, __webpack_require__(0));\n  /***/\n},\n/* 3 */\n\n/***/\nfunction (module, exports, __webpack_require__) {\n  \"use strict\";\n  /*\n  object-assign\n  (c) Sindre Sorhus\n  @license MIT\n  */\n\n  /* eslint-disable no-unused-vars */\n\n  var getOwnPropertySymbols = Object.getOwnPropertySymbols;\n  var hasOwnProperty = Object.prototype.hasOwnProperty;\n  var propIsEnumerable = Object.prototype.propertyIsEnumerable;\n\n  function toObject(val) {\n    if (val === null || val === undefined) {\n      throw new TypeError('Object.assign cannot be called with null or undefined');\n    }\n\n    return Object(val);\n  }\n\n  function shouldUseNative() {\n    try {\n      if (!Object.assign) {\n        return false;\n      } // Detect buggy property enumeration order in older V8 versions.\n      // https://bugs.chromium.org/p/v8/issues/detail?id=4118\n\n\n      var test1 = new String('abc'); // eslint-disable-line no-new-wrappers\n\n      test1[5] = 'de';\n\n      if (Object.getOwnPropertyNames(test1)[0] === '5') {\n        return false;\n      } // https://bugs.chromium.org/p/v8/issues/detail?id=3056\n\n\n      var test2 = {};\n\n      for (var i = 0; i < 10; i++) {\n        test2['_' + String.fromCharCode(i)] = i;\n      }\n\n      var order2 = Object.getOwnPropertyNames(test2).map(function (n) {\n        return test2[n];\n      });\n\n      if (order2.join('') !== '0123456789') {\n        return false;\n      } // https://bugs.chromium.org/p/v8/issues/detail?id=3056\n\n\n      var test3 = {};\n      'abcdefghijklmnopqrst'.split('').forEach(function (letter) {\n        test3[letter] = letter;\n      });\n\n      if (Object.keys(Object.assign({}, test3)).join('') !== 'abcdefghijklmnopqrst') {\n        return false;\n      }\n\n      return true;\n    } catch (err) {\n      // We don't expect any of the above to throw, but better to be safe.\n      return false;\n    }\n  }\n\n  module.exports = shouldUseNative() ? Object.assign : function (target, source) {\n    var from;\n    var to = toObject(target);\n    var symbols;\n\n    for (var s = 1; s < arguments.length; s++) {\n      from = Object(arguments[s]);\n\n      for (var key in from) {\n        if (hasOwnProperty.call(from, key)) {\n          to[key] = from[key];\n        }\n      }\n\n      if (getOwnPropertySymbols) {\n        symbols = getOwnPropertySymbols(from);\n\n        for (var i = 0; i < symbols.length; i++) {\n          if (propIsEnumerable.call(from, symbols[i])) {\n            to[symbols[i]] = from[symbols[i]];\n          }\n        }\n      }\n    }\n\n    return to;\n  };\n  /***/\n},\n/* 4 */\n\n/***/\nfunction (module, exports, __webpack_require__) {\n  \"use strict\";\n  /* WEBPACK VAR INJECTION */\n\n  (function (process) {\n    /**\n    * Copyright (c) 2014-present, Facebook, Inc.\n    *\n    * This source code is licensed under the MIT license found in the\n    * LICENSE file in the root directory of this source tree.\n    *\n    */\n    var emptyFunction = __webpack_require__(1);\n    /**\n     * Similar to invariant but only logs a warning if the condition is not met.\n     * This can be used to log issues in development environments in critical\n     * paths. Removing the logging code for production environments will keep the\n     * same logic and follow the same code paths.\n     */\n\n\n    var warning = emptyFunction;\n\n    if (process.env.NODE_ENV !== 'production') {\n      var printWarning = function printWarning(format) {\n        for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n          args[_key - 1] = arguments[_key];\n        }\n\n        var argIndex = 0;\n        var message = 'Warning: ' + format.replace(/%s/g, function () {\n          return args[argIndex++];\n        });\n\n        if (typeof console !== 'undefined') {\n          console.error(message);\n        }\n\n        try {\n          // --- Welcome to debugging React ---\n          // This error was thrown as a convenience so that you can use this stack\n          // to find the callsite that caused this warning to fire.\n          throw new Error(message);\n        } catch (x) {}\n      };\n\n      warning = function warning(condition, format) {\n        if (format === undefined) {\n          throw new Error('`warning(condition, format, ...args)` requires a warning ' + 'message argument');\n        }\n\n        if (format.indexOf('Failed Composite propType: ') === 0) {\n          return; // Ignore CompositeComponent proptype check.\n        }\n\n        if (!condition) {\n          for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {\n            args[_key2 - 2] = arguments[_key2];\n          }\n\n          printWarning.apply(undefined, [format].concat(args));\n        }\n      };\n    }\n\n    module.exports = warning;\n    /* WEBPACK VAR INJECTION */\n  }).call(exports, __webpack_require__(0));\n  /***/\n},\n/* 5 */\n\n/***/\nfunction (module, exports, __webpack_require__) {\n  \"use strict\";\n  /**\n   * Copyright (c) 2013-present, Facebook, Inc.\n   *\n   * This source code is licensed under the MIT license found in the\n   * LICENSE file in the root directory of this source tree.\n   */\n\n  var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';\n  module.exports = ReactPropTypesSecret;\n  /***/\n},\n/* 6 */\n\n/***/\nfunction (module, exports, __webpack_require__) {\n  \"use strict\";\n  /* WEBPACK VAR INJECTION */\n\n  (function (process) {\n    /**\n    * Copyright (c) 2013-present, Facebook, Inc.\n    *\n    * This source code is licensed under the MIT license found in the\n    * LICENSE file in the root directory of this source tree.\n    *\n    */\n    var emptyObject = {};\n\n    if (process.env.NODE_ENV !== 'production') {\n      Object.freeze(emptyObject);\n    }\n\n    module.exports = emptyObject;\n    /* WEBPACK VAR INJECTION */\n  }).call(exports, __webpack_require__(0));\n  /***/\n},\n/* 7 */\n\n/***/\nfunction (module, exports, __webpack_require__) {\n  \"use strict\";\n  /* WEBPACK VAR INJECTION */\n\n  (function (process) {\n    /**\n    * Copyright (c) 2013-present, Facebook, Inc.\n    *\n    * This source code is licensed under the MIT license found in the\n    * LICENSE file in the root directory of this source tree.\n    */\n    if (process.env.NODE_ENV !== 'production') {\n      var invariant = __webpack_require__(2);\n\n      var warning = __webpack_require__(4);\n\n      var ReactPropTypesSecret = __webpack_require__(5);\n\n      var loggedTypeFailures = {};\n    }\n    /**\n     * Assert that the values match with the type specs.\n     * Error messages are memorized and will only be shown once.\n     *\n     * @param {object} typeSpecs Map of name to a ReactPropType\n     * @param {object} values Runtime values that need to be type-checked\n     * @param {string} location e.g. \"prop\", \"context\", \"child context\"\n     * @param {string} componentName Name of the component for error messages.\n     * @param {?Function} getStack Returns the component stack.\n     * @private\n     */\n\n\n    function checkPropTypes(typeSpecs, values, location, componentName, getStack) {\n      if (process.env.NODE_ENV !== 'production') {\n        for (var typeSpecName in typeSpecs) {\n          if (typeSpecs.hasOwnProperty(typeSpecName)) {\n            var error; // Prop type validation may throw. In case they do, we don't want to\n            // fail the render phase where it didn't fail before. So we log it.\n            // After these have been cleaned up, we'll let them throw.\n\n            try {\n              // This is intentionally an invariant that gets caught. It's the same\n              // behavior as without this statement except with a better message.\n              invariant(typeof typeSpecs[typeSpecName] === 'function', '%s: %s type `%s` is invalid; it must be a function, usually from ' + 'the `prop-types` package, but received `%s`.', componentName || 'React class', location, typeSpecName, typeof typeSpecs[typeSpecName]);\n              error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);\n            } catch (ex) {\n              error = ex;\n            }\n\n            warning(!error || error instanceof Error, '%s: type specification of %s `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', location, typeSpecName, typeof error);\n\n            if (error instanceof Error && !(error.message in loggedTypeFailures)) {\n              // Only monitor this failure once because there tends to be a lot of the\n              // same error.\n              loggedTypeFailures[error.message] = true;\n              var stack = getStack ? getStack() : '';\n              warning(false, 'Failed %s type: %s%s', location, error.message, stack != null ? stack : '');\n            }\n          }\n        }\n      }\n    }\n\n    module.exports = checkPropTypes;\n    /* WEBPACK VAR INJECTION */\n  }).call(exports, __webpack_require__(0));\n  /***/\n},,\n/* 8 */\n\n/* 9 */\n\n/***/\nfunction (module, exports, __webpack_require__) {\n  \"use strict\";\n  /* WEBPACK VAR INJECTION */\n\n  (function (process) {\n    if (process.env.NODE_ENV === 'production') {\n      module.exports = __webpack_require__(10);\n    } else {\n      module.exports = __webpack_require__(11);\n    }\n    /* WEBPACK VAR INJECTION */\n\n  }).call(exports, __webpack_require__(0));\n  /***/\n},\n/* 10 */\n\n/***/\nfunction (module, exports, __webpack_require__) {\n  \"use strict\";\n  /** @license React v16.2.0\n   * react.production.min.js\n   *\n   * Copyright (c) 2013-present, Facebook, Inc.\n   *\n   * This source code is licensed under the MIT license found in the\n   * LICENSE file in the root directory of this source tree.\n   */\n\n  var m = __webpack_require__(3),\n      n = __webpack_require__(6),\n      p = __webpack_require__(1),\n      q = \"function\" === typeof Symbol && Symbol[\"for\"],\n      r = q ? Symbol[\"for\"](\"react.element\") : 60103,\n      t = q ? Symbol[\"for\"](\"react.call\") : 60104,\n      u = q ? Symbol[\"for\"](\"react.return\") : 60105,\n      v = q ? Symbol[\"for\"](\"react.portal\") : 60106,\n      w = q ? Symbol[\"for\"](\"react.fragment\") : 60107,\n      x = \"function\" === typeof Symbol && Symbol.iterator;\n\n  function y(a) {\n    for (var b = arguments.length - 1, e = \"Minified React error #\" + a + \"; visit http://facebook.github.io/react/docs/error-decoder.html?invariant\\x3d\" + a, c = 0; c < b; c++) e += \"\\x26args[]\\x3d\" + encodeURIComponent(arguments[c + 1]);\n\n    b = Error(e + \" for the full message or use the non-minified dev environment for full errors and additional helpful warnings.\");\n    b.name = \"Invariant Violation\";\n    b.framesToPop = 1;\n    throw b;\n  }\n\n  var z = {\n    isMounted: function () {\n      return !1;\n    },\n    enqueueForceUpdate: function () {},\n    enqueueReplaceState: function () {},\n    enqueueSetState: function () {}\n  };\n\n  function A(a, b, e) {\n    this.props = a;\n    this.context = b;\n    this.refs = n;\n    this.updater = e || z;\n  }\n\n  A.prototype.isReactComponent = {};\n\n  A.prototype.setState = function (a, b) {\n    \"object\" !== typeof a && \"function\" !== typeof a && null != a ? y(\"85\") : void 0;\n    this.updater.enqueueSetState(this, a, b, \"setState\");\n  };\n\n  A.prototype.forceUpdate = function (a) {\n    this.updater.enqueueForceUpdate(this, a, \"forceUpdate\");\n  };\n\n  function B(a, b, e) {\n    this.props = a;\n    this.context = b;\n    this.refs = n;\n    this.updater = e || z;\n  }\n\n  function C() {}\n\n  C.prototype = A.prototype;\n  var D = B.prototype = new C();\n  D.constructor = B;\n  m(D, A.prototype);\n  D.isPureReactComponent = !0;\n\n  function E(a, b, e) {\n    this.props = a;\n    this.context = b;\n    this.refs = n;\n    this.updater = e || z;\n  }\n\n  var F = E.prototype = new C();\n  F.constructor = E;\n  m(F, A.prototype);\n  F.unstable_isAsyncReactComponent = !0;\n\n  F.render = function () {\n    return this.props.children;\n  };\n\n  var G = {\n    current: null\n  },\n      H = Object.prototype.hasOwnProperty,\n      I = {\n    key: !0,\n    ref: !0,\n    __self: !0,\n    __source: !0\n  };\n\n  function J(a, b, e) {\n    var c,\n        d = {},\n        g = null,\n        k = null;\n    if (null != b) for (c in void 0 !== b.ref && (k = b.ref), void 0 !== b.key && (g = \"\" + b.key), b) H.call(b, c) && !I.hasOwnProperty(c) && (d[c] = b[c]);\n    var f = arguments.length - 2;\n    if (1 === f) d.children = e;else if (1 < f) {\n      for (var h = Array(f), l = 0; l < f; l++) h[l] = arguments[l + 2];\n\n      d.children = h;\n    }\n    if (a && a.defaultProps) for (c in f = a.defaultProps, f) void 0 === d[c] && (d[c] = f[c]);\n    return {\n      $$typeof: r,\n      type: a,\n      key: g,\n      ref: k,\n      props: d,\n      _owner: G.current\n    };\n  }\n\n  function K(a) {\n    return \"object\" === typeof a && null !== a && a.$$typeof === r;\n  }\n\n  function escape(a) {\n    var b = {\n      \"\\x3d\": \"\\x3d0\",\n      \":\": \"\\x3d2\"\n    };\n    return \"$\" + (\"\" + a).replace(/[=:]/g, function (a) {\n      return b[a];\n    });\n  }\n\n  var L = /\\/+/g,\n      M = [];\n\n  function N(a, b, e, c) {\n    if (M.length) {\n      var d = M.pop();\n      d.result = a;\n      d.keyPrefix = b;\n      d.func = e;\n      d.context = c;\n      d.count = 0;\n      return d;\n    }\n\n    return {\n      result: a,\n      keyPrefix: b,\n      func: e,\n      context: c,\n      count: 0\n    };\n  }\n\n  function O(a) {\n    a.result = null;\n    a.keyPrefix = null;\n    a.func = null;\n    a.context = null;\n    a.count = 0;\n    10 > M.length && M.push(a);\n  }\n\n  function P(a, b, e, c) {\n    var d = typeof a;\n    if (\"undefined\" === d || \"boolean\" === d) a = null;\n    var g = !1;\n    if (null === a) g = !0;else switch (d) {\n      case \"string\":\n      case \"number\":\n        g = !0;\n        break;\n\n      case \"object\":\n        switch (a.$$typeof) {\n          case r:\n          case t:\n          case u:\n          case v:\n            g = !0;\n        }\n\n    }\n    if (g) return e(c, a, \"\" === b ? \".\" + Q(a, 0) : b), 1;\n    g = 0;\n    b = \"\" === b ? \".\" : b + \":\";\n    if (Array.isArray(a)) for (var k = 0; k < a.length; k++) {\n      d = a[k];\n      var f = b + Q(d, k);\n      g += P(d, f, e, c);\n    } else if (null === a || \"undefined\" === typeof a ? f = null : (f = x && a[x] || a[\"@@iterator\"], f = \"function\" === typeof f ? f : null), \"function\" === typeof f) for (a = f.call(a), k = 0; !(d = a.next()).done;) d = d.value, f = b + Q(d, k++), g += P(d, f, e, c);else \"object\" === d && (e = \"\" + a, y(\"31\", \"[object Object]\" === e ? \"object with keys {\" + Object.keys(a).join(\", \") + \"}\" : e, \"\"));\n    return g;\n  }\n\n  function Q(a, b) {\n    return \"object\" === typeof a && null !== a && null != a.key ? escape(a.key) : b.toString(36);\n  }\n\n  function R(a, b) {\n    a.func.call(a.context, b, a.count++);\n  }\n\n  function S(a, b, e) {\n    var c = a.result,\n        d = a.keyPrefix;\n    a = a.func.call(a.context, b, a.count++);\n    Array.isArray(a) ? T(a, c, e, p.thatReturnsArgument) : null != a && (K(a) && (b = d + (!a.key || b && b.key === a.key ? \"\" : (\"\" + a.key).replace(L, \"$\\x26/\") + \"/\") + e, a = {\n      $$typeof: r,\n      type: a.type,\n      key: b,\n      ref: a.ref,\n      props: a.props,\n      _owner: a._owner\n    }), c.push(a));\n  }\n\n  function T(a, b, e, c, d) {\n    var g = \"\";\n    null != e && (g = (\"\" + e).replace(L, \"$\\x26/\") + \"/\");\n    b = N(b, g, c, d);\n    null == a || P(a, \"\", S, b);\n    O(b);\n  }\n\n  var U = {\n    Children: {\n      map: function (a, b, e) {\n        if (null == a) return a;\n        var c = [];\n        T(a, c, null, b, e);\n        return c;\n      },\n      forEach: function (a, b, e) {\n        if (null == a) return a;\n        b = N(null, null, b, e);\n        null == a || P(a, \"\", R, b);\n        O(b);\n      },\n      count: function (a) {\n        return null == a ? 0 : P(a, \"\", p.thatReturnsNull, null);\n      },\n      toArray: function (a) {\n        var b = [];\n        T(a, b, null, p.thatReturnsArgument);\n        return b;\n      },\n      only: function (a) {\n        K(a) ? void 0 : y(\"143\");\n        return a;\n      }\n    },\n    Component: A,\n    PureComponent: B,\n    unstable_AsyncComponent: E,\n    Fragment: w,\n    createElement: J,\n    cloneElement: function (a, b, e) {\n      var c = m({}, a.props),\n          d = a.key,\n          g = a.ref,\n          k = a._owner;\n\n      if (null != b) {\n        void 0 !== b.ref && (g = b.ref, k = G.current);\n        void 0 !== b.key && (d = \"\" + b.key);\n        if (a.type && a.type.defaultProps) var f = a.type.defaultProps;\n\n        for (h in b) H.call(b, h) && !I.hasOwnProperty(h) && (c[h] = void 0 === b[h] && void 0 !== f ? f[h] : b[h]);\n      }\n\n      var h = arguments.length - 2;\n      if (1 === h) c.children = e;else if (1 < h) {\n        f = Array(h);\n\n        for (var l = 0; l < h; l++) f[l] = arguments[l + 2];\n\n        c.children = f;\n      }\n      return {\n        $$typeof: r,\n        type: a.type,\n        key: d,\n        ref: g,\n        props: c,\n        _owner: k\n      };\n    },\n    createFactory: function (a) {\n      var b = J.bind(null, a);\n      b.type = a;\n      return b;\n    },\n    isValidElement: K,\n    version: \"16.2.0\",\n    __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED: {\n      ReactCurrentOwner: G,\n      assign: m\n    }\n  },\n      V = Object.freeze({\n    default: U\n  }),\n      W = V && U || V;\n  module.exports = W[\"default\"] ? W[\"default\"] : W;\n  /***/\n},\n/* 11 */\n\n/***/\nfunction (module, exports, __webpack_require__) {\n  \"use strict\";\n  /* WEBPACK VAR INJECTION */\n\n  (function (process) {\n    /** @license React v16.2.0\n    * react.development.js\n    *\n    * Copyright (c) 2013-present, Facebook, Inc.\n    *\n    * This source code is licensed under the MIT license found in the\n    * LICENSE file in the root directory of this source tree.\n    */\n    if (process.env.NODE_ENV !== \"production\") {\n      (function () {\n        'use strict';\n\n        var _assign = __webpack_require__(3);\n\n        var emptyObject = __webpack_require__(6);\n\n        var invariant = __webpack_require__(2);\n\n        var warning = __webpack_require__(4);\n\n        var emptyFunction = __webpack_require__(1);\n\n        var checkPropTypes = __webpack_require__(7); // TODO: this is special because it gets imported during build.\n\n\n        var ReactVersion = '16.2.0'; // The Symbol used to tag the ReactElement-like types. If there is no native Symbol\n        // nor polyfill, then a plain number is used for performance.\n\n        var hasSymbol = typeof Symbol === 'function' && Symbol['for'];\n        var REACT_ELEMENT_TYPE = hasSymbol ? Symbol['for']('react.element') : 0xeac7;\n        var REACT_CALL_TYPE = hasSymbol ? Symbol['for']('react.call') : 0xeac8;\n        var REACT_RETURN_TYPE = hasSymbol ? Symbol['for']('react.return') : 0xeac9;\n        var REACT_PORTAL_TYPE = hasSymbol ? Symbol['for']('react.portal') : 0xeaca;\n        var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol['for']('react.fragment') : 0xeacb;\n        var MAYBE_ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;\n        var FAUX_ITERATOR_SYMBOL = '@@iterator';\n\n        function getIteratorFn(maybeIterable) {\n          if (maybeIterable === null || typeof maybeIterable === 'undefined') {\n            return null;\n          }\n\n          var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];\n\n          if (typeof maybeIterator === 'function') {\n            return maybeIterator;\n          }\n\n          return null;\n        }\n        /**\n         * WARNING: DO NOT manually require this module.\n         * This is a replacement for `invariant(...)` used by the error code system\n         * and will _only_ be required by the corresponding babel pass.\n         * It always throws.\n         */\n\n        /**\n         * Forked from fbjs/warning:\n         * https://github.com/facebook/fbjs/blob/e66ba20ad5be433eb54423f2b097d829324d9de6/packages/fbjs/src/__forks__/warning.js\n         *\n         * Only change is we use console.warn instead of console.error,\n         * and do nothing when 'console' is not supported.\n         * This really simplifies the code.\n         * ---\n         * Similar to invariant but only logs a warning if the condition is not met.\n         * This can be used to log issues in development environments in critical\n         * paths. Removing the logging code for production environments will keep the\n         * same logic and follow the same code paths.\n         */\n\n\n        var lowPriorityWarning = function () {};\n\n        {\n          var printWarning = function (format) {\n            for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n              args[_key - 1] = arguments[_key];\n            }\n\n            var argIndex = 0;\n            var message = 'Warning: ' + format.replace(/%s/g, function () {\n              return args[argIndex++];\n            });\n\n            if (typeof console !== 'undefined') {\n              console.warn(message);\n            }\n\n            try {\n              // --- Welcome to debugging React ---\n              // This error was thrown as a convenience so that you can use this stack\n              // to find the callsite that caused this warning to fire.\n              throw new Error(message);\n            } catch (x) {}\n          };\n\n          lowPriorityWarning = function (condition, format) {\n            if (format === undefined) {\n              throw new Error('`warning(condition, format, ...args)` requires a warning ' + 'message argument');\n            }\n\n            if (!condition) {\n              for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {\n                args[_key2 - 2] = arguments[_key2];\n              }\n\n              printWarning.apply(undefined, [format].concat(args));\n            }\n          };\n        }\n        var lowPriorityWarning$1 = lowPriorityWarning;\n        var didWarnStateUpdateForUnmountedComponent = {};\n\n        function warnNoop(publicInstance, callerName) {\n          {\n            var constructor = publicInstance.constructor;\n            var componentName = constructor && (constructor.displayName || constructor.name) || 'ReactClass';\n            var warningKey = componentName + '.' + callerName;\n\n            if (didWarnStateUpdateForUnmountedComponent[warningKey]) {\n              return;\n            }\n\n            warning(false, '%s(...): Can only update a mounted or mounting component. ' + 'This usually means you called %s() on an unmounted component. ' + 'This is a no-op.\\n\\nPlease check the code for the %s component.', callerName, callerName, componentName);\n            didWarnStateUpdateForUnmountedComponent[warningKey] = true;\n          }\n        }\n        /**\n         * This is the abstract API for an update queue.\n         */\n\n\n        var ReactNoopUpdateQueue = {\n          /**\n           * Checks whether or not this composite component is mounted.\n           * @param {ReactClass} publicInstance The instance we want to test.\n           * @return {boolean} True if mounted, false otherwise.\n           * @protected\n           * @final\n           */\n          isMounted: function (publicInstance) {\n            return false;\n          },\n\n          /**\n           * Forces an update. This should only be invoked when it is known with\n           * certainty that we are **not** in a DOM transaction.\n           *\n           * You may want to call this when you know that some deeper aspect of the\n           * component's state has changed but `setState` was not called.\n           *\n           * This will not invoke `shouldComponentUpdate`, but it will invoke\n           * `componentWillUpdate` and `componentDidUpdate`.\n           *\n           * @param {ReactClass} publicInstance The instance that should rerender.\n           * @param {?function} callback Called after component is updated.\n           * @param {?string} callerName name of the calling function in the public API.\n           * @internal\n           */\n          enqueueForceUpdate: function (publicInstance, callback, callerName) {\n            warnNoop(publicInstance, 'forceUpdate');\n          },\n\n          /**\n           * Replaces all of the state. Always use this or `setState` to mutate state.\n           * You should treat `this.state` as immutable.\n           *\n           * There is no guarantee that `this.state` will be immediately updated, so\n           * accessing `this.state` after calling this method may return the old value.\n           *\n           * @param {ReactClass} publicInstance The instance that should rerender.\n           * @param {object} completeState Next state.\n           * @param {?function} callback Called after component is updated.\n           * @param {?string} callerName name of the calling function in the public API.\n           * @internal\n           */\n          enqueueReplaceState: function (publicInstance, completeState, callback, callerName) {\n            warnNoop(publicInstance, 'replaceState');\n          },\n\n          /**\n           * Sets a subset of the state. This only exists because _pendingState is\n           * internal. This provides a merging strategy that is not available to deep\n           * properties which is confusing. TODO: Expose pendingState or don't use it\n           * during the merge.\n           *\n           * @param {ReactClass} publicInstance The instance that should rerender.\n           * @param {object} partialState Next partial state to be merged with state.\n           * @param {?function} callback Called after component is updated.\n           * @param {?string} Name of the calling function in the public API.\n           * @internal\n           */\n          enqueueSetState: function (publicInstance, partialState, callback, callerName) {\n            warnNoop(publicInstance, 'setState');\n          }\n        };\n        /**\n         * Base class helpers for the updating state of a component.\n         */\n\n        function Component(props, context, updater) {\n          this.props = props;\n          this.context = context;\n          this.refs = emptyObject; // We initialize the default updater but the real one gets injected by the\n          // renderer.\n\n          this.updater = updater || ReactNoopUpdateQueue;\n        }\n\n        Component.prototype.isReactComponent = {};\n        /**\n         * Sets a subset of the state. Always use this to mutate\n         * state. You should treat `this.state` as immutable.\n         *\n         * There is no guarantee that `this.state` will be immediately updated, so\n         * accessing `this.state` after calling this method may return the old value.\n         *\n         * There is no guarantee that calls to `setState` will run synchronously,\n         * as they may eventually be batched together.  You can provide an optional\n         * callback that will be executed when the call to setState is actually\n         * completed.\n         *\n         * When a function is provided to setState, it will be called at some point in\n         * the future (not synchronously). It will be called with the up to date\n         * component arguments (state, props, context). These values can be different\n         * from this.* because your function may be called after receiveProps but before\n         * shouldComponentUpdate, and this new state, props, and context will not yet be\n         * assigned to this.\n         *\n         * @param {object|function} partialState Next partial state or function to\n         *        produce next partial state to be merged with current state.\n         * @param {?function} callback Called after state is updated.\n         * @final\n         * @protected\n         */\n\n        Component.prototype.setState = function (partialState, callback) {\n          !(typeof partialState === 'object' || typeof partialState === 'function' || partialState == null) ? invariant(false, 'setState(...): takes an object of state variables to update or a function which returns an object of state variables.') : void 0;\n          this.updater.enqueueSetState(this, partialState, callback, 'setState');\n        };\n        /**\n         * Forces an update. This should only be invoked when it is known with\n         * certainty that we are **not** in a DOM transaction.\n         *\n         * You may want to call this when you know that some deeper aspect of the\n         * component's state has changed but `setState` was not called.\n         *\n         * This will not invoke `shouldComponentUpdate`, but it will invoke\n         * `componentWillUpdate` and `componentDidUpdate`.\n         *\n         * @param {?function} callback Called after update is complete.\n         * @final\n         * @protected\n         */\n\n\n        Component.prototype.forceUpdate = function (callback) {\n          this.updater.enqueueForceUpdate(this, callback, 'forceUpdate');\n        };\n        /**\n         * Deprecated APIs. These APIs used to exist on classic React classes but since\n         * we would like to deprecate them, we're not going to move them over to this\n         * modern base class. Instead, we define a getter that warns if it's accessed.\n         */\n\n\n        {\n          var deprecatedAPIs = {\n            isMounted: ['isMounted', 'Instead, make sure to clean up subscriptions and pending requests in ' + 'componentWillUnmount to prevent memory leaks.'],\n            replaceState: ['replaceState', 'Refactor your code to use setState instead (see ' + 'https://github.com/facebook/react/issues/3236).']\n          };\n\n          var defineDeprecationWarning = function (methodName, info) {\n            Object.defineProperty(Component.prototype, methodName, {\n              get: function () {\n                lowPriorityWarning$1(false, '%s(...) is deprecated in plain JavaScript React classes. %s', info[0], info[1]);\n                return undefined;\n              }\n            });\n          };\n\n          for (var fnName in deprecatedAPIs) {\n            if (deprecatedAPIs.hasOwnProperty(fnName)) {\n              defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);\n            }\n          }\n        }\n        /**\n         * Base class helpers for the updating state of a component.\n         */\n\n        function PureComponent(props, context, updater) {\n          // Duplicated from Component.\n          this.props = props;\n          this.context = context;\n          this.refs = emptyObject; // We initialize the default updater but the real one gets injected by the\n          // renderer.\n\n          this.updater = updater || ReactNoopUpdateQueue;\n        }\n\n        function ComponentDummy() {}\n\n        ComponentDummy.prototype = Component.prototype;\n        var pureComponentPrototype = PureComponent.prototype = new ComponentDummy();\n        pureComponentPrototype.constructor = PureComponent; // Avoid an extra prototype jump for these methods.\n\n        _assign(pureComponentPrototype, Component.prototype);\n\n        pureComponentPrototype.isPureReactComponent = true;\n\n        function AsyncComponent(props, context, updater) {\n          // Duplicated from Component.\n          this.props = props;\n          this.context = context;\n          this.refs = emptyObject; // We initialize the default updater but the real one gets injected by the\n          // renderer.\n\n          this.updater = updater || ReactNoopUpdateQueue;\n        }\n\n        var asyncComponentPrototype = AsyncComponent.prototype = new ComponentDummy();\n        asyncComponentPrototype.constructor = AsyncComponent; // Avoid an extra prototype jump for these methods.\n\n        _assign(asyncComponentPrototype, Component.prototype);\n\n        asyncComponentPrototype.unstable_isAsyncReactComponent = true;\n\n        asyncComponentPrototype.render = function () {\n          return this.props.children;\n        };\n        /**\n         * Keeps track of the current owner.\n         *\n         * The current owner is the component who should own any components that are\n         * currently being constructed.\n         */\n\n\n        var ReactCurrentOwner = {\n          /**\n           * @internal\n           * @type {ReactComponent}\n           */\n          current: null\n        };\n        var hasOwnProperty = Object.prototype.hasOwnProperty;\n        var RESERVED_PROPS = {\n          key: true,\n          ref: true,\n          __self: true,\n          __source: true\n        };\n        var specialPropKeyWarningShown;\n        var specialPropRefWarningShown;\n\n        function hasValidRef(config) {\n          {\n            if (hasOwnProperty.call(config, 'ref')) {\n              var getter = Object.getOwnPropertyDescriptor(config, 'ref').get;\n\n              if (getter && getter.isReactWarning) {\n                return false;\n              }\n            }\n          }\n          return config.ref !== undefined;\n        }\n\n        function hasValidKey(config) {\n          {\n            if (hasOwnProperty.call(config, 'key')) {\n              var getter = Object.getOwnPropertyDescriptor(config, 'key').get;\n\n              if (getter && getter.isReactWarning) {\n                return false;\n              }\n            }\n          }\n          return config.key !== undefined;\n        }\n\n        function defineKeyPropWarningGetter(props, displayName) {\n          var warnAboutAccessingKey = function () {\n            if (!specialPropKeyWarningShown) {\n              specialPropKeyWarningShown = true;\n              warning(false, '%s: `key` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://fb.me/react-special-props)', displayName);\n            }\n          };\n\n          warnAboutAccessingKey.isReactWarning = true;\n          Object.defineProperty(props, 'key', {\n            get: warnAboutAccessingKey,\n            configurable: true\n          });\n        }\n\n        function defineRefPropWarningGetter(props, displayName) {\n          var warnAboutAccessingRef = function () {\n            if (!specialPropRefWarningShown) {\n              specialPropRefWarningShown = true;\n              warning(false, '%s: `ref` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://fb.me/react-special-props)', displayName);\n            }\n          };\n\n          warnAboutAccessingRef.isReactWarning = true;\n          Object.defineProperty(props, 'ref', {\n            get: warnAboutAccessingRef,\n            configurable: true\n          });\n        }\n        /**\n         * Factory method to create a new React element. This no longer adheres to\n         * the class pattern, so do not use new to call it. Also, no instanceof check\n         * will work. Instead test $$typeof field against Symbol.for('react.element') to check\n         * if something is a React Element.\n         *\n         * @param {*} type\n         * @param {*} key\n         * @param {string|object} ref\n         * @param {*} self A *temporary* helper to detect places where `this` is\n         * different from the `owner` when React.createElement is called, so that we\n         * can warn. We want to get rid of owner and replace string `ref`s with arrow\n         * functions, and as long as `this` and owner are the same, there will be no\n         * change in behavior.\n         * @param {*} source An annotation object (added by a transpiler or otherwise)\n         * indicating filename, line number, and/or other information.\n         * @param {*} owner\n         * @param {*} props\n         * @internal\n         */\n\n\n        var ReactElement = function (type, key, ref, self, source, owner, props) {\n          var element = {\n            // This tag allow us to uniquely identify this as a React Element\n            $$typeof: REACT_ELEMENT_TYPE,\n            // Built-in properties that belong on the element\n            type: type,\n            key: key,\n            ref: ref,\n            props: props,\n            // Record the component responsible for creating this element.\n            _owner: owner\n          };\n          {\n            // The validation flag is currently mutative. We put it on\n            // an external backing store so that we can freeze the whole object.\n            // This can be replaced with a WeakMap once they are implemented in\n            // commonly used development environments.\n            element._store = {}; // To make comparing ReactElements easier for testing purposes, we make\n            // the validation flag non-enumerable (where possible, which should\n            // include every environment we run tests in), so the test framework\n            // ignores it.\n\n            Object.defineProperty(element._store, 'validated', {\n              configurable: false,\n              enumerable: false,\n              writable: true,\n              value: false\n            }); // self and source are DEV only properties.\n\n            Object.defineProperty(element, '_self', {\n              configurable: false,\n              enumerable: false,\n              writable: false,\n              value: self\n            }); // Two elements created in two different places should be considered\n            // equal for testing purposes and therefore we hide it from enumeration.\n\n            Object.defineProperty(element, '_source', {\n              configurable: false,\n              enumerable: false,\n              writable: false,\n              value: source\n            });\n\n            if (Object.freeze) {\n              Object.freeze(element.props);\n              Object.freeze(element);\n            }\n          }\n          return element;\n        };\n        /**\n         * Create and return a new ReactElement of the given type.\n         * See https://reactjs.org/docs/react-api.html#createelement\n         */\n\n\n        function createElement(type, config, children) {\n          var propName; // Reserved names are extracted\n\n          var props = {};\n          var key = null;\n          var ref = null;\n          var self = null;\n          var source = null;\n\n          if (config != null) {\n            if (hasValidRef(config)) {\n              ref = config.ref;\n            }\n\n            if (hasValidKey(config)) {\n              key = '' + config.key;\n            }\n\n            self = config.__self === undefined ? null : config.__self;\n            source = config.__source === undefined ? null : config.__source; // Remaining properties are added to a new props object\n\n            for (propName in config) {\n              if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {\n                props[propName] = config[propName];\n              }\n            }\n          } // Children can be more than one argument, and those are transferred onto\n          // the newly allocated props object.\n\n\n          var childrenLength = arguments.length - 2;\n\n          if (childrenLength === 1) {\n            props.children = children;\n          } else if (childrenLength > 1) {\n            var childArray = Array(childrenLength);\n\n            for (var i = 0; i < childrenLength; i++) {\n              childArray[i] = arguments[i + 2];\n            }\n\n            {\n              if (Object.freeze) {\n                Object.freeze(childArray);\n              }\n            }\n            props.children = childArray;\n          } // Resolve default props\n\n\n          if (type && type.defaultProps) {\n            var defaultProps = type.defaultProps;\n\n            for (propName in defaultProps) {\n              if (props[propName] === undefined) {\n                props[propName] = defaultProps[propName];\n              }\n            }\n          }\n\n          {\n            if (key || ref) {\n              if (typeof props.$$typeof === 'undefined' || props.$$typeof !== REACT_ELEMENT_TYPE) {\n                var displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;\n\n                if (key) {\n                  defineKeyPropWarningGetter(props, displayName);\n                }\n\n                if (ref) {\n                  defineRefPropWarningGetter(props, displayName);\n                }\n              }\n            }\n          }\n          return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);\n        }\n        /**\n         * Return a function that produces ReactElements of a given type.\n         * See https://reactjs.org/docs/react-api.html#createfactory\n         */\n\n\n        function cloneAndReplaceKey(oldElement, newKey) {\n          var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);\n          return newElement;\n        }\n        /**\n         * Clone and return a new ReactElement using element as the starting point.\n         * See https://reactjs.org/docs/react-api.html#cloneelement\n         */\n\n\n        function cloneElement(element, config, children) {\n          var propName; // Original props are copied\n\n          var props = _assign({}, element.props); // Reserved names are extracted\n\n\n          var key = element.key;\n          var ref = element.ref; // Self is preserved since the owner is preserved.\n\n          var self = element._self; // Source is preserved since cloneElement is unlikely to be targeted by a\n          // transpiler, and the original source is probably a better indicator of the\n          // true owner.\n\n          var source = element._source; // Owner will be preserved, unless ref is overridden\n\n          var owner = element._owner;\n\n          if (config != null) {\n            if (hasValidRef(config)) {\n              // Silently steal the ref from the parent.\n              ref = config.ref;\n              owner = ReactCurrentOwner.current;\n            }\n\n            if (hasValidKey(config)) {\n              key = '' + config.key;\n            } // Remaining properties override existing props\n\n\n            var defaultProps;\n\n            if (element.type && element.type.defaultProps) {\n              defaultProps = element.type.defaultProps;\n            }\n\n            for (propName in config) {\n              if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {\n                if (config[propName] === undefined && defaultProps !== undefined) {\n                  // Resolve default props\n                  props[propName] = defaultProps[propName];\n                } else {\n                  props[propName] = config[propName];\n                }\n              }\n            }\n          } // Children can be more than one argument, and those are transferred onto\n          // the newly allocated props object.\n\n\n          var childrenLength = arguments.length - 2;\n\n          if (childrenLength === 1) {\n            props.children = children;\n          } else if (childrenLength > 1) {\n            var childArray = Array(childrenLength);\n\n            for (var i = 0; i < childrenLength; i++) {\n              childArray[i] = arguments[i + 2];\n            }\n\n            props.children = childArray;\n          }\n\n          return ReactElement(element.type, key, ref, self, source, owner, props);\n        }\n        /**\n         * Verifies the object is a ReactElement.\n         * See https://reactjs.org/docs/react-api.html#isvalidelement\n         * @param {?object} object\n         * @return {boolean} True if `object` is a valid component.\n         * @final\n         */\n\n\n        function isValidElement(object) {\n          return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;\n        }\n\n        var ReactDebugCurrentFrame = {};\n        {\n          // Component that is being worked on\n          ReactDebugCurrentFrame.getCurrentStack = null;\n\n          ReactDebugCurrentFrame.getStackAddendum = function () {\n            var impl = ReactDebugCurrentFrame.getCurrentStack;\n\n            if (impl) {\n              return impl();\n            }\n\n            return null;\n          };\n        }\n        var SEPARATOR = '.';\n        var SUBSEPARATOR = ':';\n        /**\n         * Escape and wrap key so it is safe to use as a reactid\n         *\n         * @param {string} key to be escaped.\n         * @return {string} the escaped key.\n         */\n\n        function escape(key) {\n          var escapeRegex = /[=:]/g;\n          var escaperLookup = {\n            '=': '=0',\n            ':': '=2'\n          };\n          var escapedString = ('' + key).replace(escapeRegex, function (match) {\n            return escaperLookup[match];\n          });\n          return '$' + escapedString;\n        }\n        /**\n         * TODO: Test that a single child and an array with one item have the same key\n         * pattern.\n         */\n\n\n        var didWarnAboutMaps = false;\n        var userProvidedKeyEscapeRegex = /\\/+/g;\n\n        function escapeUserProvidedKey(text) {\n          return ('' + text).replace(userProvidedKeyEscapeRegex, '$&/');\n        }\n\n        var POOL_SIZE = 10;\n        var traverseContextPool = [];\n\n        function getPooledTraverseContext(mapResult, keyPrefix, mapFunction, mapContext) {\n          if (traverseContextPool.length) {\n            var traverseContext = traverseContextPool.pop();\n            traverseContext.result = mapResult;\n            traverseContext.keyPrefix = keyPrefix;\n            traverseContext.func = mapFunction;\n            traverseContext.context = mapContext;\n            traverseContext.count = 0;\n            return traverseContext;\n          } else {\n            return {\n              result: mapResult,\n              keyPrefix: keyPrefix,\n              func: mapFunction,\n              context: mapContext,\n              count: 0\n            };\n          }\n        }\n\n        function releaseTraverseContext(traverseContext) {\n          traverseContext.result = null;\n          traverseContext.keyPrefix = null;\n          traverseContext.func = null;\n          traverseContext.context = null;\n          traverseContext.count = 0;\n\n          if (traverseContextPool.length < POOL_SIZE) {\n            traverseContextPool.push(traverseContext);\n          }\n        }\n        /**\n         * @param {?*} children Children tree container.\n         * @param {!string} nameSoFar Name of the key path so far.\n         * @param {!function} callback Callback to invoke with each child found.\n         * @param {?*} traverseContext Used to pass information throughout the traversal\n         * process.\n         * @return {!number} The number of children in this subtree.\n         */\n\n\n        function traverseAllChildrenImpl(children, nameSoFar, callback, traverseContext) {\n          var type = typeof children;\n\n          if (type === 'undefined' || type === 'boolean') {\n            // All of the above are perceived as null.\n            children = null;\n          }\n\n          var invokeCallback = false;\n\n          if (children === null) {\n            invokeCallback = true;\n          } else {\n            switch (type) {\n              case 'string':\n              case 'number':\n                invokeCallback = true;\n                break;\n\n              case 'object':\n                switch (children.$$typeof) {\n                  case REACT_ELEMENT_TYPE:\n                  case REACT_CALL_TYPE:\n                  case REACT_RETURN_TYPE:\n                  case REACT_PORTAL_TYPE:\n                    invokeCallback = true;\n                }\n\n            }\n          }\n\n          if (invokeCallback) {\n            callback(traverseContext, children, // If it's the only child, treat the name as if it was wrapped in an array\n            // so that it's consistent if the number of children grows.\n            nameSoFar === '' ? SEPARATOR + getComponentKey(children, 0) : nameSoFar);\n            return 1;\n          }\n\n          var child;\n          var nextName;\n          var subtreeCount = 0; // Count of children found in the current subtree.\n\n          var nextNamePrefix = nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;\n\n          if (Array.isArray(children)) {\n            for (var i = 0; i < children.length; i++) {\n              child = children[i];\n              nextName = nextNamePrefix + getComponentKey(child, i);\n              subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);\n            }\n          } else {\n            var iteratorFn = getIteratorFn(children);\n\n            if (typeof iteratorFn === 'function') {\n              {\n                // Warn about using Maps as children\n                if (iteratorFn === children.entries) {\n                  warning(didWarnAboutMaps, 'Using Maps as children is unsupported and will likely yield ' + 'unexpected results. Convert it to a sequence/iterable of keyed ' + 'ReactElements instead.%s', ReactDebugCurrentFrame.getStackAddendum());\n                  didWarnAboutMaps = true;\n                }\n              }\n              var iterator = iteratorFn.call(children);\n              var step;\n              var ii = 0;\n\n              while (!(step = iterator.next()).done) {\n                child = step.value;\n                nextName = nextNamePrefix + getComponentKey(child, ii++);\n                subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);\n              }\n            } else if (type === 'object') {\n              var addendum = '';\n              {\n                addendum = ' If you meant to render a collection of children, use an array ' + 'instead.' + ReactDebugCurrentFrame.getStackAddendum();\n              }\n              var childrenString = '' + children;\n              invariant(false, 'Objects are not valid as a React child (found: %s).%s', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum);\n            }\n          }\n\n          return subtreeCount;\n        }\n        /**\n         * Traverses children that are typically specified as `props.children`, but\n         * might also be specified through attributes:\n         *\n         * - `traverseAllChildren(this.props.children, ...)`\n         * - `traverseAllChildren(this.props.leftPanelChildren, ...)`\n         *\n         * The `traverseContext` is an optional argument that is passed through the\n         * entire traversal. It can be used to store accumulations or anything else that\n         * the callback might find relevant.\n         *\n         * @param {?*} children Children tree object.\n         * @param {!function} callback To invoke upon traversing each child.\n         * @param {?*} traverseContext Context for traversal.\n         * @return {!number} The number of children in this subtree.\n         */\n\n\n        function traverseAllChildren(children, callback, traverseContext) {\n          if (children == null) {\n            return 0;\n          }\n\n          return traverseAllChildrenImpl(children, '', callback, traverseContext);\n        }\n        /**\n         * Generate a key string that identifies a component within a set.\n         *\n         * @param {*} component A component that could contain a manual key.\n         * @param {number} index Index that is used if a manual key is not provided.\n         * @return {string}\n         */\n\n\n        function getComponentKey(component, index) {\n          // Do some typechecking here since we call this blindly. We want to ensure\n          // that we don't block potential future ES APIs.\n          if (typeof component === 'object' && component !== null && component.key != null) {\n            // Explicit key\n            return escape(component.key);\n          } // Implicit key determined by the index in the set\n\n\n          return index.toString(36);\n        }\n\n        function forEachSingleChild(bookKeeping, child, name) {\n          var func = bookKeeping.func,\n              context = bookKeeping.context;\n          func.call(context, child, bookKeeping.count++);\n        }\n        /**\n         * Iterates through children that are typically specified as `props.children`.\n         *\n         * See https://reactjs.org/docs/react-api.html#react.children.foreach\n         *\n         * The provided forEachFunc(child, index) will be called for each\n         * leaf child.\n         *\n         * @param {?*} children Children tree container.\n         * @param {function(*, int)} forEachFunc\n         * @param {*} forEachContext Context for forEachContext.\n         */\n\n\n        function forEachChildren(children, forEachFunc, forEachContext) {\n          if (children == null) {\n            return children;\n          }\n\n          var traverseContext = getPooledTraverseContext(null, null, forEachFunc, forEachContext);\n          traverseAllChildren(children, forEachSingleChild, traverseContext);\n          releaseTraverseContext(traverseContext);\n        }\n\n        function mapSingleChildIntoContext(bookKeeping, child, childKey) {\n          var result = bookKeeping.result,\n              keyPrefix = bookKeeping.keyPrefix,\n              func = bookKeeping.func,\n              context = bookKeeping.context;\n          var mappedChild = func.call(context, child, bookKeeping.count++);\n\n          if (Array.isArray(mappedChild)) {\n            mapIntoWithKeyPrefixInternal(mappedChild, result, childKey, emptyFunction.thatReturnsArgument);\n          } else if (mappedChild != null) {\n            if (isValidElement(mappedChild)) {\n              mappedChild = cloneAndReplaceKey(mappedChild, // Keep both the (mapped) and old keys if they differ, just as\n              // traverseAllChildren used to do for objects as children\n              keyPrefix + (mappedChild.key && (!child || child.key !== mappedChild.key) ? escapeUserProvidedKey(mappedChild.key) + '/' : '') + childKey);\n            }\n\n            result.push(mappedChild);\n          }\n        }\n\n        function mapIntoWithKeyPrefixInternal(children, array, prefix, func, context) {\n          var escapedPrefix = '';\n\n          if (prefix != null) {\n            escapedPrefix = escapeUserProvidedKey(prefix) + '/';\n          }\n\n          var traverseContext = getPooledTraverseContext(array, escapedPrefix, func, context);\n          traverseAllChildren(children, mapSingleChildIntoContext, traverseContext);\n          releaseTraverseContext(traverseContext);\n        }\n        /**\n         * Maps children that are typically specified as `props.children`.\n         *\n         * See https://reactjs.org/docs/react-api.html#react.children.map\n         *\n         * The provided mapFunction(child, key, index) will be called for each\n         * leaf child.\n         *\n         * @param {?*} children Children tree container.\n         * @param {function(*, int)} func The map function.\n         * @param {*} context Context for mapFunction.\n         * @return {object} Object containing the ordered map of results.\n         */\n\n\n        function mapChildren(children, func, context) {\n          if (children == null) {\n            return children;\n          }\n\n          var result = [];\n          mapIntoWithKeyPrefixInternal(children, result, null, func, context);\n          return result;\n        }\n        /**\n         * Count the number of children that are typically specified as\n         * `props.children`.\n         *\n         * See https://reactjs.org/docs/react-api.html#react.children.count\n         *\n         * @param {?*} children Children tree container.\n         * @return {number} The number of children.\n         */\n\n\n        function countChildren(children, context) {\n          return traverseAllChildren(children, emptyFunction.thatReturnsNull, null);\n        }\n        /**\n         * Flatten a children object (typically specified as `props.children`) and\n         * return an array with appropriately re-keyed children.\n         *\n         * See https://reactjs.org/docs/react-api.html#react.children.toarray\n         */\n\n\n        function toArray(children) {\n          var result = [];\n          mapIntoWithKeyPrefixInternal(children, result, null, emptyFunction.thatReturnsArgument);\n          return result;\n        }\n        /**\n         * Returns the first child in a collection of children and verifies that there\n         * is only one child in the collection.\n         *\n         * See https://reactjs.org/docs/react-api.html#react.children.only\n         *\n         * The current implementation of this function assumes that a single child gets\n         * passed without a wrapper, but the purpose of this helper function is to\n         * abstract away the particular structure of children.\n         *\n         * @param {?object} children Child collection structure.\n         * @return {ReactElement} The first and only `ReactElement` contained in the\n         * structure.\n         */\n\n\n        function onlyChild(children) {\n          !isValidElement(children) ? invariant(false, 'React.Children.only expected to receive a single React element child.') : void 0;\n          return children;\n        }\n\n        var describeComponentFrame = function (name, source, ownerName) {\n          return '\\n    in ' + (name || 'Unknown') + (source ? ' (at ' + source.fileName.replace(/^.*[\\\\\\/]/, '') + ':' + source.lineNumber + ')' : ownerName ? ' (created by ' + ownerName + ')' : '');\n        };\n\n        function getComponentName(fiber) {\n          var type = fiber.type;\n\n          if (typeof type === 'string') {\n            return type;\n          }\n\n          if (typeof type === 'function') {\n            return type.displayName || type.name;\n          }\n\n          return null;\n        }\n        /**\n         * ReactElementValidator provides a wrapper around a element factory\n         * which validates the props passed to the element. This is intended to be\n         * used only in DEV and could be replaced by a static type checker for languages\n         * that support it.\n         */\n\n\n        {\n          var currentlyValidatingElement = null;\n          var propTypesMisspellWarningShown = false;\n\n          var getDisplayName = function (element) {\n            if (element == null) {\n              return '#empty';\n            } else if (typeof element === 'string' || typeof element === 'number') {\n              return '#text';\n            } else if (typeof element.type === 'string') {\n              return element.type;\n            } else if (element.type === REACT_FRAGMENT_TYPE) {\n              return 'React.Fragment';\n            } else {\n              return element.type.displayName || element.type.name || 'Unknown';\n            }\n          };\n\n          var getStackAddendum = function () {\n            var stack = '';\n\n            if (currentlyValidatingElement) {\n              var name = getDisplayName(currentlyValidatingElement);\n              var owner = currentlyValidatingElement._owner;\n              stack += describeComponentFrame(name, currentlyValidatingElement._source, owner && getComponentName(owner));\n            }\n\n            stack += ReactDebugCurrentFrame.getStackAddendum() || '';\n            return stack;\n          };\n\n          var VALID_FRAGMENT_PROPS = new Map([['children', true], ['key', true]]);\n        }\n\n        function getDeclarationErrorAddendum() {\n          if (ReactCurrentOwner.current) {\n            var name = getComponentName(ReactCurrentOwner.current);\n\n            if (name) {\n              return '\\n\\nCheck the render method of `' + name + '`.';\n            }\n          }\n\n          return '';\n        }\n\n        function getSourceInfoErrorAddendum(elementProps) {\n          if (elementProps !== null && elementProps !== undefined && elementProps.__source !== undefined) {\n            var source = elementProps.__source;\n            var fileName = source.fileName.replace(/^.*[\\\\\\/]/, '');\n            var lineNumber = source.lineNumber;\n            return '\\n\\nCheck your code at ' + fileName + ':' + lineNumber + '.';\n          }\n\n          return '';\n        }\n        /**\n         * Warn if there's no key explicitly set on dynamic arrays of children or\n         * object keys are not valid. This allows us to keep track of children between\n         * updates.\n         */\n\n\n        var ownerHasKeyUseWarning = {};\n\n        function getCurrentComponentErrorInfo(parentType) {\n          var info = getDeclarationErrorAddendum();\n\n          if (!info) {\n            var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;\n\n            if (parentName) {\n              info = '\\n\\nCheck the top-level render call using <' + parentName + '>.';\n            }\n          }\n\n          return info;\n        }\n        /**\n         * Warn if the element doesn't have an explicit key assigned to it.\n         * This element is in an array. The array could grow and shrink or be\n         * reordered. All children that haven't already been validated are required to\n         * have a \"key\" property assigned to it. Error statuses are cached so a warning\n         * will only be shown once.\n         *\n         * @internal\n         * @param {ReactElement} element Element that requires a key.\n         * @param {*} parentType element's parent's type.\n         */\n\n\n        function validateExplicitKey(element, parentType) {\n          if (!element._store || element._store.validated || element.key != null) {\n            return;\n          }\n\n          element._store.validated = true;\n          var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);\n\n          if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {\n            return;\n          }\n\n          ownerHasKeyUseWarning[currentComponentErrorInfo] = true; // Usually the current owner is the offender, but if it accepts children as a\n          // property, it may be the creator of the child that's responsible for\n          // assigning it a key.\n\n          var childOwner = '';\n\n          if (element && element._owner && element._owner !== ReactCurrentOwner.current) {\n            // Give the component that originally created this child.\n            childOwner = ' It was passed a child from ' + getComponentName(element._owner) + '.';\n          }\n\n          currentlyValidatingElement = element;\n          {\n            warning(false, 'Each child in an array or iterator should have a unique \"key\" prop.' + '%s%s See https://fb.me/react-warning-keys for more information.%s', currentComponentErrorInfo, childOwner, getStackAddendum());\n          }\n          currentlyValidatingElement = null;\n        }\n        /**\n         * Ensure that every element either is passed in a static location, in an\n         * array with an explicit keys property defined, or in an object literal\n         * with valid key property.\n         *\n         * @internal\n         * @param {ReactNode} node Statically passed child of any type.\n         * @param {*} parentType node's parent's type.\n         */\n\n\n        function validateChildKeys(node, parentType) {\n          if (typeof node !== 'object') {\n            return;\n          }\n\n          if (Array.isArray(node)) {\n            for (var i = 0; i < node.length; i++) {\n              var child = node[i];\n\n              if (isValidElement(child)) {\n                validateExplicitKey(child, parentType);\n              }\n            }\n          } else if (isValidElement(node)) {\n            // This element was passed in a valid location.\n            if (node._store) {\n              node._store.validated = true;\n            }\n          } else if (node) {\n            var iteratorFn = getIteratorFn(node);\n\n            if (typeof iteratorFn === 'function') {\n              // Entry iterators used to provide implicit keys,\n              // but now we print a separate warning for them later.\n              if (iteratorFn !== node.entries) {\n                var iterator = iteratorFn.call(node);\n                var step;\n\n                while (!(step = iterator.next()).done) {\n                  if (isValidElement(step.value)) {\n                    validateExplicitKey(step.value, parentType);\n                  }\n                }\n              }\n            }\n          }\n        }\n        /**\n         * Given an element, validate that its props follow the propTypes definition,\n         * provided by the type.\n         *\n         * @param {ReactElement} element\n         */\n\n\n        function validatePropTypes(element) {\n          var componentClass = element.type;\n\n          if (typeof componentClass !== 'function') {\n            return;\n          }\n\n          var name = componentClass.displayName || componentClass.name;\n          var propTypes = componentClass.propTypes;\n\n          if (propTypes) {\n            currentlyValidatingElement = element;\n            checkPropTypes(propTypes, element.props, 'prop', name, getStackAddendum);\n            currentlyValidatingElement = null;\n          } else if (componentClass.PropTypes !== undefined && !propTypesMisspellWarningShown) {\n            propTypesMisspellWarningShown = true;\n            warning(false, 'Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?', name || 'Unknown');\n          }\n\n          if (typeof componentClass.getDefaultProps === 'function') {\n            warning(componentClass.getDefaultProps.isReactClassApproved, 'getDefaultProps is only used on classic React.createClass ' + 'definitions. Use a static property named `defaultProps` instead.');\n          }\n        }\n        /**\n         * Given a fragment, validate that it can only be provided with fragment props\n         * @param {ReactElement} fragment\n         */\n\n\n        function validateFragmentProps(fragment) {\n          currentlyValidatingElement = fragment;\n          var _iteratorNormalCompletion = true;\n          var _didIteratorError = false;\n          var _iteratorError = undefined;\n\n          try {\n            for (var _iterator = Object.keys(fragment.props)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n              var key = _step.value;\n\n              if (!VALID_FRAGMENT_PROPS.has(key)) {\n                warning(false, 'Invalid prop `%s` supplied to `React.Fragment`. ' + 'React.Fragment can only have `key` and `children` props.%s', key, getStackAddendum());\n                break;\n              }\n            }\n          } catch (err) {\n            _didIteratorError = true;\n            _iteratorError = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion && _iterator['return']) {\n                _iterator['return']();\n              }\n            } finally {\n              if (_didIteratorError) {\n                throw _iteratorError;\n              }\n            }\n          }\n\n          if (fragment.ref !== null) {\n            warning(false, 'Invalid attribute `ref` supplied to `React.Fragment`.%s', getStackAddendum());\n          }\n\n          currentlyValidatingElement = null;\n        }\n\n        function createElementWithValidation(type, props, children) {\n          var validType = typeof type === 'string' || typeof type === 'function' || typeof type === 'symbol' || typeof type === 'number'; // We warn in this case but don't throw. We expect the element creation to\n          // succeed and there will likely be errors in render.\n\n          if (!validType) {\n            var info = '';\n\n            if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {\n              info += ' You likely forgot to export your component from the file ' + \"it's defined in, or you might have mixed up default and named imports.\";\n            }\n\n            var sourceInfo = getSourceInfoErrorAddendum(props);\n\n            if (sourceInfo) {\n              info += sourceInfo;\n            } else {\n              info += getDeclarationErrorAddendum();\n            }\n\n            info += getStackAddendum() || '';\n            warning(false, 'React.createElement: type is invalid -- expected a string (for ' + 'built-in components) or a class/function (for composite ' + 'components) but got: %s.%s', type == null ? type : typeof type, info);\n          }\n\n          var element = createElement.apply(this, arguments); // The result can be nullish if a mock or a custom function is used.\n          // TODO: Drop this when these are no longer allowed as the type argument.\n\n          if (element == null) {\n            return element;\n          } // Skip key warning if the type isn't valid since our key validation logic\n          // doesn't expect a non-string/function type and can throw confusing errors.\n          // We don't want exception behavior to differ between dev and prod.\n          // (Rendering will throw with a helpful message and as soon as the type is\n          // fixed, the key warnings will appear.)\n\n\n          if (validType) {\n            for (var i = 2; i < arguments.length; i++) {\n              validateChildKeys(arguments[i], type);\n            }\n          }\n\n          if (typeof type === 'symbol' && type === REACT_FRAGMENT_TYPE) {\n            validateFragmentProps(element);\n          } else {\n            validatePropTypes(element);\n          }\n\n          return element;\n        }\n\n        function createFactoryWithValidation(type) {\n          var validatedFactory = createElementWithValidation.bind(null, type); // Legacy hook TODO: Warn if this is accessed\n\n          validatedFactory.type = type;\n          {\n            Object.defineProperty(validatedFactory, 'type', {\n              enumerable: false,\n              get: function () {\n                lowPriorityWarning$1(false, 'Factory.type is deprecated. Access the class directly ' + 'before passing it to createFactory.');\n                Object.defineProperty(this, 'type', {\n                  value: type\n                });\n                return type;\n              }\n            });\n          }\n          return validatedFactory;\n        }\n\n        function cloneElementWithValidation(element, props, children) {\n          var newElement = cloneElement.apply(this, arguments);\n\n          for (var i = 2; i < arguments.length; i++) {\n            validateChildKeys(arguments[i], newElement.type);\n          }\n\n          validatePropTypes(newElement);\n          return newElement;\n        }\n\n        var React = {\n          Children: {\n            map: mapChildren,\n            forEach: forEachChildren,\n            count: countChildren,\n            toArray: toArray,\n            only: onlyChild\n          },\n          Component: Component,\n          PureComponent: PureComponent,\n          unstable_AsyncComponent: AsyncComponent,\n          Fragment: REACT_FRAGMENT_TYPE,\n          createElement: createElementWithValidation,\n          cloneElement: cloneElementWithValidation,\n          createFactory: createFactoryWithValidation,\n          isValidElement: isValidElement,\n          version: ReactVersion,\n          __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED: {\n            ReactCurrentOwner: ReactCurrentOwner,\n            // Used by renderers to avoid bundling object-assign twice in UMD bundles:\n            assign: _assign\n          }\n        };\n        {\n          _assign(React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED, {\n            // These should not be included in production.\n            ReactDebugCurrentFrame: ReactDebugCurrentFrame,\n            // Shim for React DOM 16.0.0 which still destructured (but not used) this.\n            // TODO: remove in React 17.0.\n            ReactComponentTreeHook: {}\n          });\n        }\n        var React$2 = Object.freeze({\n          default: React\n        });\n        var React$3 = React$2 && React || React$2; // TODO: decide on the top-level export form.\n        // This is hacky but makes it work with both Rollup and Jest.\n\n        var react = React$3['default'] ? React$3['default'] : React$3;\n        module.exports = react;\n      })();\n    }\n    /* WEBPACK VAR INJECTION */\n\n  }).call(exports, __webpack_require__(0));\n  /***/\n},\n/* 12 */\n\n/***/\nfunction (module, exports, __webpack_require__) {\n  /* WEBPACK VAR INJECTION */\n  (function (process) {\n    /**\n    * Copyright (c) 2013-present, Facebook, Inc.\n    *\n    * This source code is licensed under the MIT license found in the\n    * LICENSE file in the root directory of this source tree.\n    */\n    if (process.env.NODE_ENV !== 'production') {\n      var REACT_ELEMENT_TYPE = typeof Symbol === 'function' && Symbol.for && Symbol.for('react.element') || 0xeac7;\n\n      var isValidElement = function (object) {\n        return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;\n      }; // By explicitly using `prop-types` you are opting into new development behavior.\n      // http://fb.me/prop-types-in-prod\n\n\n      var throwOnDirectAccess = true;\n      module.exports = __webpack_require__(13)(isValidElement, throwOnDirectAccess);\n    } else {\n      // By explicitly using `prop-types` you are opting into new production behavior.\n      // http://fb.me/prop-types-in-prod\n      module.exports = __webpack_require__(14)();\n    }\n    /* WEBPACK VAR INJECTION */\n\n  }).call(exports, __webpack_require__(0));\n  /***/\n},\n/* 13 */\n\n/***/\nfunction (module, exports, __webpack_require__) {\n  \"use strict\";\n  /* WEBPACK VAR INJECTION */\n\n  (function (process) {\n    /**\n    * Copyright (c) 2013-present, Facebook, Inc.\n    *\n    * This source code is licensed under the MIT license found in the\n    * LICENSE file in the root directory of this source tree.\n    */\n    var emptyFunction = __webpack_require__(1);\n\n    var invariant = __webpack_require__(2);\n\n    var warning = __webpack_require__(4);\n\n    var assign = __webpack_require__(3);\n\n    var ReactPropTypesSecret = __webpack_require__(5);\n\n    var checkPropTypes = __webpack_require__(7);\n\n    module.exports = function (isValidElement, throwOnDirectAccess) {\n      /* global Symbol */\n      var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;\n      var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.\n\n      /**\n       * Returns the iterator method function contained on the iterable object.\n       *\n       * Be sure to invoke the function with the iterable as context:\n       *\n       *     var iteratorFn = getIteratorFn(myIterable);\n       *     if (iteratorFn) {\n       *       var iterator = iteratorFn.call(myIterable);\n       *       ...\n       *     }\n       *\n       * @param {?object} maybeIterable\n       * @return {?function}\n       */\n\n      function getIteratorFn(maybeIterable) {\n        var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);\n\n        if (typeof iteratorFn === 'function') {\n          return iteratorFn;\n        }\n      }\n      /**\n       * Collection of methods that allow declaration and validation of props that are\n       * supplied to React components. Example usage:\n       *\n       *   var Props = require('ReactPropTypes');\n       *   var MyArticle = React.createClass({\n       *     propTypes: {\n       *       // An optional string prop named \"description\".\n       *       description: Props.string,\n       *\n       *       // A required enum prop named \"category\".\n       *       category: Props.oneOf(['News','Photos']).isRequired,\n       *\n       *       // A prop named \"dialog\" that requires an instance of Dialog.\n       *       dialog: Props.instanceOf(Dialog).isRequired\n       *     },\n       *     render: function() { ... }\n       *   });\n       *\n       * A more formal specification of how these methods are used:\n       *\n       *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)\n       *   decl := ReactPropTypes.{type}(.isRequired)?\n       *\n       * Each and every declaration produces a function with the same signature. This\n       * allows the creation of custom validation functions. For example:\n       *\n       *  var MyLink = React.createClass({\n       *    propTypes: {\n       *      // An optional string or URI prop named \"href\".\n       *      href: function(props, propName, componentName) {\n       *        var propValue = props[propName];\n       *        if (propValue != null && typeof propValue !== 'string' &&\n       *            !(propValue instanceof URI)) {\n       *          return new Error(\n       *            'Expected a string or an URI for ' + propName + ' in ' +\n       *            componentName\n       *          );\n       *        }\n       *      }\n       *    },\n       *    render: function() {...}\n       *  });\n       *\n       * @internal\n       */\n\n\n      var ANONYMOUS = '<<anonymous>>'; // Important!\n      // Keep this list in sync with production version in `./factoryWithThrowingShims.js`.\n\n      var ReactPropTypes = {\n        array: createPrimitiveTypeChecker('array'),\n        bool: createPrimitiveTypeChecker('boolean'),\n        func: createPrimitiveTypeChecker('function'),\n        number: createPrimitiveTypeChecker('number'),\n        object: createPrimitiveTypeChecker('object'),\n        string: createPrimitiveTypeChecker('string'),\n        symbol: createPrimitiveTypeChecker('symbol'),\n        any: createAnyTypeChecker(),\n        arrayOf: createArrayOfTypeChecker,\n        element: createElementTypeChecker(),\n        instanceOf: createInstanceTypeChecker,\n        node: createNodeChecker(),\n        objectOf: createObjectOfTypeChecker,\n        oneOf: createEnumTypeChecker,\n        oneOfType: createUnionTypeChecker,\n        shape: createShapeTypeChecker,\n        exact: createStrictShapeTypeChecker\n      };\n      /**\n       * inlined Object.is polyfill to avoid requiring consumers ship their own\n       * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is\n       */\n\n      /*eslint-disable no-self-compare*/\n\n      function is(x, y) {\n        // SameValue algorithm\n        if (x === y) {\n          // Steps 1-5, 7-10\n          // Steps 6.b-6.e: +0 != -0\n          return x !== 0 || 1 / x === 1 / y;\n        } else {\n          // Step 6.a: NaN == NaN\n          return x !== x && y !== y;\n        }\n      }\n      /*eslint-enable no-self-compare*/\n\n      /**\n       * We use an Error-like object for backward compatibility as people may call\n       * PropTypes directly and inspect their output. However, we don't use real\n       * Errors anymore. We don't inspect their stack anyway, and creating them\n       * is prohibitively expensive if they are created too often, such as what\n       * happens in oneOfType() for any type before the one that matched.\n       */\n\n\n      function PropTypeError(message) {\n        this.message = message;\n        this.stack = '';\n      } // Make `instanceof Error` still work for returned errors.\n\n\n      PropTypeError.prototype = Error.prototype;\n\n      function createChainableTypeChecker(validate) {\n        if (process.env.NODE_ENV !== 'production') {\n          var manualPropTypeCallCache = {};\n          var manualPropTypeWarningCount = 0;\n        }\n\n        function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {\n          componentName = componentName || ANONYMOUS;\n          propFullName = propFullName || propName;\n\n          if (secret !== ReactPropTypesSecret) {\n            if (throwOnDirectAccess) {\n              // New behavior only for users of `prop-types` package\n              invariant(false, 'Calling PropTypes validators directly is not supported by the `prop-types` package. ' + 'Use `PropTypes.checkPropTypes()` to call them. ' + 'Read more at http://fb.me/use-check-prop-types');\n            } else if (process.env.NODE_ENV !== 'production' && typeof console !== 'undefined') {\n              // Old behavior for people using React.PropTypes\n              var cacheKey = componentName + ':' + propName;\n\n              if (!manualPropTypeCallCache[cacheKey] && // Avoid spamming the console because they are often not actionable except for lib authors\n              manualPropTypeWarningCount < 3) {\n                warning(false, 'You are manually calling a React.PropTypes validation ' + 'function for the `%s` prop on `%s`. This is deprecated ' + 'and will throw in the standalone `prop-types` package. ' + 'You may be seeing this warning due to a third-party PropTypes ' + 'library. See https://fb.me/react-warning-dont-call-proptypes ' + 'for details.', propFullName, componentName);\n                manualPropTypeCallCache[cacheKey] = true;\n                manualPropTypeWarningCount++;\n              }\n            }\n          }\n\n          if (props[propName] == null) {\n            if (isRequired) {\n              if (props[propName] === null) {\n                return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required ' + ('in `' + componentName + '`, but its value is `null`.'));\n              }\n\n              return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required in ' + ('`' + componentName + '`, but its value is `undefined`.'));\n            }\n\n            return null;\n          } else {\n            return validate(props, propName, componentName, location, propFullName);\n          }\n        }\n\n        var chainedCheckType = checkType.bind(null, false);\n        chainedCheckType.isRequired = checkType.bind(null, true);\n        return chainedCheckType;\n      }\n\n      function createPrimitiveTypeChecker(expectedType) {\n        function validate(props, propName, componentName, location, propFullName, secret) {\n          var propValue = props[propName];\n          var propType = getPropType(propValue);\n\n          if (propType !== expectedType) {\n            // `propValue` being instance of, say, date/regexp, pass the 'object'\n            // check, but we can offer a more precise error message here rather than\n            // 'of type `object`'.\n            var preciseType = getPreciseType(propValue);\n            return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + preciseType + '` supplied to `' + componentName + '`, expected ') + ('`' + expectedType + '`.'));\n          }\n\n          return null;\n        }\n\n        return createChainableTypeChecker(validate);\n      }\n\n      function createAnyTypeChecker() {\n        return createChainableTypeChecker(emptyFunction.thatReturnsNull);\n      }\n\n      function createArrayOfTypeChecker(typeChecker) {\n        function validate(props, propName, componentName, location, propFullName) {\n          if (typeof typeChecker !== 'function') {\n            return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside arrayOf.');\n          }\n\n          var propValue = props[propName];\n\n          if (!Array.isArray(propValue)) {\n            var propType = getPropType(propValue);\n            return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an array.'));\n          }\n\n          for (var i = 0; i < propValue.length; i++) {\n            var error = typeChecker(propValue, i, componentName, location, propFullName + '[' + i + ']', ReactPropTypesSecret);\n\n            if (error instanceof Error) {\n              return error;\n            }\n          }\n\n          return null;\n        }\n\n        return createChainableTypeChecker(validate);\n      }\n\n      function createElementTypeChecker() {\n        function validate(props, propName, componentName, location, propFullName) {\n          var propValue = props[propName];\n\n          if (!isValidElement(propValue)) {\n            var propType = getPropType(propValue);\n            return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement.'));\n          }\n\n          return null;\n        }\n\n        return createChainableTypeChecker(validate);\n      }\n\n      function createInstanceTypeChecker(expectedClass) {\n        function validate(props, propName, componentName, location, propFullName) {\n          if (!(props[propName] instanceof expectedClass)) {\n            var expectedClassName = expectedClass.name || ANONYMOUS;\n            var actualClassName = getClassName(props[propName]);\n            return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') + ('instance of `' + expectedClassName + '`.'));\n          }\n\n          return null;\n        }\n\n        return createChainableTypeChecker(validate);\n      }\n\n      function createEnumTypeChecker(expectedValues) {\n        if (!Array.isArray(expectedValues)) {\n          process.env.NODE_ENV !== 'production' ? warning(false, 'Invalid argument supplied to oneOf, expected an instance of array.') : void 0;\n          return emptyFunction.thatReturnsNull;\n        }\n\n        function validate(props, propName, componentName, location, propFullName) {\n          var propValue = props[propName];\n\n          for (var i = 0; i < expectedValues.length; i++) {\n            if (is(propValue, expectedValues[i])) {\n              return null;\n            }\n          }\n\n          var valuesString = JSON.stringify(expectedValues);\n          return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of value `' + propValue + '` ' + ('supplied to `' + componentName + '`, expected one of ' + valuesString + '.'));\n        }\n\n        return createChainableTypeChecker(validate);\n      }\n\n      function createObjectOfTypeChecker(typeChecker) {\n        function validate(props, propName, componentName, location, propFullName) {\n          if (typeof typeChecker !== 'function') {\n            return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside objectOf.');\n          }\n\n          var propValue = props[propName];\n          var propType = getPropType(propValue);\n\n          if (propType !== 'object') {\n            return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an object.'));\n          }\n\n          for (var key in propValue) {\n            if (propValue.hasOwnProperty(key)) {\n              var error = typeChecker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);\n\n              if (error instanceof Error) {\n                return error;\n              }\n            }\n          }\n\n          return null;\n        }\n\n        return createChainableTypeChecker(validate);\n      }\n\n      function createUnionTypeChecker(arrayOfTypeCheckers) {\n        if (!Array.isArray(arrayOfTypeCheckers)) {\n          process.env.NODE_ENV !== 'production' ? warning(false, 'Invalid argument supplied to oneOfType, expected an instance of array.') : void 0;\n          return emptyFunction.thatReturnsNull;\n        }\n\n        for (var i = 0; i < arrayOfTypeCheckers.length; i++) {\n          var checker = arrayOfTypeCheckers[i];\n\n          if (typeof checker !== 'function') {\n            warning(false, 'Invalid argument supplied to oneOfType. Expected an array of check functions, but ' + 'received %s at index %s.', getPostfixForTypeWarning(checker), i);\n            return emptyFunction.thatReturnsNull;\n          }\n        }\n\n        function validate(props, propName, componentName, location, propFullName) {\n          for (var i = 0; i < arrayOfTypeCheckers.length; i++) {\n            var checker = arrayOfTypeCheckers[i];\n\n            if (checker(props, propName, componentName, location, propFullName, ReactPropTypesSecret) == null) {\n              return null;\n            }\n          }\n\n          return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`.'));\n        }\n\n        return createChainableTypeChecker(validate);\n      }\n\n      function createNodeChecker() {\n        function validate(props, propName, componentName, location, propFullName) {\n          if (!isNode(props[propName])) {\n            return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a ReactNode.'));\n          }\n\n          return null;\n        }\n\n        return createChainableTypeChecker(validate);\n      }\n\n      function createShapeTypeChecker(shapeTypes) {\n        function validate(props, propName, componentName, location, propFullName) {\n          var propValue = props[propName];\n          var propType = getPropType(propValue);\n\n          if (propType !== 'object') {\n            return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));\n          }\n\n          for (var key in shapeTypes) {\n            var checker = shapeTypes[key];\n\n            if (!checker) {\n              continue;\n            }\n\n            var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);\n\n            if (error) {\n              return error;\n            }\n          }\n\n          return null;\n        }\n\n        return createChainableTypeChecker(validate);\n      }\n\n      function createStrictShapeTypeChecker(shapeTypes) {\n        function validate(props, propName, componentName, location, propFullName) {\n          var propValue = props[propName];\n          var propType = getPropType(propValue);\n\n          if (propType !== 'object') {\n            return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));\n          } // We need to check all keys in case some are required but missing from\n          // props.\n\n\n          var allKeys = assign({}, props[propName], shapeTypes);\n\n          for (var key in allKeys) {\n            var checker = shapeTypes[key];\n\n            if (!checker) {\n              return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` key `' + key + '` supplied to `' + componentName + '`.' + '\\nBad object: ' + JSON.stringify(props[propName], null, '  ') + '\\nValid keys: ' + JSON.stringify(Object.keys(shapeTypes), null, '  '));\n            }\n\n            var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);\n\n            if (error) {\n              return error;\n            }\n          }\n\n          return null;\n        }\n\n        return createChainableTypeChecker(validate);\n      }\n\n      function isNode(propValue) {\n        switch (typeof propValue) {\n          case 'number':\n          case 'string':\n          case 'undefined':\n            return true;\n\n          case 'boolean':\n            return !propValue;\n\n          case 'object':\n            if (Array.isArray(propValue)) {\n              return propValue.every(isNode);\n            }\n\n            if (propValue === null || isValidElement(propValue)) {\n              return true;\n            }\n\n            var iteratorFn = getIteratorFn(propValue);\n\n            if (iteratorFn) {\n              var iterator = iteratorFn.call(propValue);\n              var step;\n\n              if (iteratorFn !== propValue.entries) {\n                while (!(step = iterator.next()).done) {\n                  if (!isNode(step.value)) {\n                    return false;\n                  }\n                }\n              } else {\n                // Iterator will provide entry [k,v] tuples rather than values.\n                while (!(step = iterator.next()).done) {\n                  var entry = step.value;\n\n                  if (entry) {\n                    if (!isNode(entry[1])) {\n                      return false;\n                    }\n                  }\n                }\n              }\n            } else {\n              return false;\n            }\n\n            return true;\n\n          default:\n            return false;\n        }\n      }\n\n      function isSymbol(propType, propValue) {\n        // Native Symbol.\n        if (propType === 'symbol') {\n          return true;\n        } // 19.4.3.5 Symbol.prototype[@@toStringTag] === 'Symbol'\n\n\n        if (propValue['@@toStringTag'] === 'Symbol') {\n          return true;\n        } // Fallback for non-spec compliant Symbols which are polyfilled.\n\n\n        if (typeof Symbol === 'function' && propValue instanceof Symbol) {\n          return true;\n        }\n\n        return false;\n      } // Equivalent of `typeof` but with special handling for array and regexp.\n\n\n      function getPropType(propValue) {\n        var propType = typeof propValue;\n\n        if (Array.isArray(propValue)) {\n          return 'array';\n        }\n\n        if (propValue instanceof RegExp) {\n          // Old webkits (at least until Android 4.0) return 'function' rather than\n          // 'object' for typeof a RegExp. We'll normalize this here so that /bla/\n          // passes PropTypes.object.\n          return 'object';\n        }\n\n        if (isSymbol(propType, propValue)) {\n          return 'symbol';\n        }\n\n        return propType;\n      } // This handles more types than `getPropType`. Only used for error messages.\n      // See `createPrimitiveTypeChecker`.\n\n\n      function getPreciseType(propValue) {\n        if (typeof propValue === 'undefined' || propValue === null) {\n          return '' + propValue;\n        }\n\n        var propType = getPropType(propValue);\n\n        if (propType === 'object') {\n          if (propValue instanceof Date) {\n            return 'date';\n          } else if (propValue instanceof RegExp) {\n            return 'regexp';\n          }\n        }\n\n        return propType;\n      } // Returns a string that is postfixed to a warning about an invalid type.\n      // For example, \"undefined\" or \"of type array\"\n\n\n      function getPostfixForTypeWarning(value) {\n        var type = getPreciseType(value);\n\n        switch (type) {\n          case 'array':\n          case 'object':\n            return 'an ' + type;\n\n          case 'boolean':\n          case 'date':\n          case 'regexp':\n            return 'a ' + type;\n\n          default:\n            return type;\n        }\n      } // Returns class name of the object, if any.\n\n\n      function getClassName(propValue) {\n        if (!propValue.constructor || !propValue.constructor.name) {\n          return ANONYMOUS;\n        }\n\n        return propValue.constructor.name;\n      }\n\n      ReactPropTypes.checkPropTypes = checkPropTypes;\n      ReactPropTypes.PropTypes = ReactPropTypes;\n      return ReactPropTypes;\n    };\n    /* WEBPACK VAR INJECTION */\n\n  }).call(exports, __webpack_require__(0));\n  /***/\n},\n/* 14 */\n\n/***/\nfunction (module, exports, __webpack_require__) {\n  \"use strict\";\n  /**\n   * Copyright (c) 2013-present, Facebook, Inc.\n   *\n   * This source code is licensed under the MIT license found in the\n   * LICENSE file in the root directory of this source tree.\n   */\n\n  var emptyFunction = __webpack_require__(1);\n\n  var invariant = __webpack_require__(2);\n\n  var ReactPropTypesSecret = __webpack_require__(5);\n\n  module.exports = function () {\n    function shim(props, propName, componentName, location, propFullName, secret) {\n      if (secret === ReactPropTypesSecret) {\n        // It is still safe when called from React.\n        return;\n      }\n\n      invariant(false, 'Calling PropTypes validators directly is not supported by the `prop-types` package. ' + 'Use PropTypes.checkPropTypes() to call them. ' + 'Read more at http://fb.me/use-check-prop-types');\n    }\n\n    ;\n    shim.isRequired = shim;\n\n    function getShim() {\n      return shim;\n    }\n\n    ; // Important!\n    // Keep this list in sync with production version in `./factoryWithTypeCheckers.js`.\n\n    var ReactPropTypes = {\n      array: shim,\n      bool: shim,\n      func: shim,\n      number: shim,\n      object: shim,\n      string: shim,\n      symbol: shim,\n      any: shim,\n      arrayOf: getShim,\n      element: shim,\n      instanceOf: getShim,\n      node: shim,\n      objectOf: getShim,\n      oneOf: getShim,\n      oneOfType: getShim,\n      shape: getShim,\n      exact: getShim\n    };\n    ReactPropTypes.checkPropTypes = emptyFunction;\n    ReactPropTypes.PropTypes = ReactPropTypes;\n    return ReactPropTypes;\n  };\n  /***/\n\n}]);","map":null,"metadata":{},"sourceType":"script"}