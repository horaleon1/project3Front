{"ast":null,"code":"'use strict';\n\nconst processFn = (fn, options) => function (...args) {\n  const P = options.promiseModule;\n  return new P((resolve, reject) => {\n    if (options.multiArgs) {\n      args.push((...result) => {\n        if (options.errorFirst) {\n          if (result[0]) {\n            reject(result);\n          } else {\n            result.shift();\n            resolve(result);\n          }\n        } else {\n          resolve(result);\n        }\n      });\n    } else if (options.errorFirst) {\n      args.push((error, result) => {\n        if (error) {\n          reject(error);\n        } else {\n          resolve(result);\n        }\n      });\n    } else {\n      args.push(resolve);\n    }\n\n    fn.apply(this, args);\n  });\n};\n\nmodule.exports = (input, options) => {\n  options = Object.assign({\n    exclude: [/.+(Sync|Stream)$/],\n    errorFirst: true,\n    promiseModule: Promise\n  }, options);\n  const objType = typeof input;\n\n  if (!(input !== null && (objType === 'object' || objType === 'function'))) {\n    throw new TypeError(\"Expected `input` to be a `Function` or `Object`, got `\".concat(input === null ? 'null' : objType, \"`\"));\n  }\n\n  const filter = key => {\n    const match = pattern => typeof pattern === 'string' ? key === pattern : pattern.test(key);\n\n    return options.include ? options.include.some(match) : !options.exclude.some(match);\n  };\n\n  let ret;\n\n  if (objType === 'function') {\n    ret = function (...args) {\n      return options.excludeMain ? input(...args) : processFn(input, options).apply(this, args);\n    };\n  } else {\n    ret = Object.create(Object.getPrototypeOf(input));\n  }\n\n  for (const key in input) {\n    // eslint-disable-line guard-for-in\n    const property = input[key];\n    ret[key] = typeof property === 'function' && filter(key) ? processFn(property, options) : property;\n  }\n\n  return ret;\n};","map":null,"metadata":{},"sourceType":"script"}