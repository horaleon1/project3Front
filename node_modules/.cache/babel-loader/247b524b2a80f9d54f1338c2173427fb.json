{"ast":null,"code":"/*\n Copyright 2012-2015, Yahoo Inc.\n Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.\n */\n'use strict';\n/**\n * istanbul-lib-coverage exports an API that allows you to create and manipulate\n * file coverage, coverage maps (a set of file coverage objects) and summary\n * coverage objects. File coverage for the same file can be merged as can\n * entire coverage maps.\n *\n * @module Exports\n */\n\nconst CoverageSummary = require('./lib/file').CoverageSummary;\n\nconst FileCoverage = require('./lib/file').FileCoverage;\n\nconst CoverageMap = require('./lib/coverage-map').CoverageMap;\n\nmodule.exports = {\n  /**\n   * creates a coverage summary object\n   * @param {Object} obj an argument with the same semantics\n   *  as the one passed to the `CoverageSummary` constructor\n   * @returns {CoverageSummary}\n   */\n  createCoverageSummary(obj) {\n    if (obj && obj instanceof CoverageSummary) {\n      return obj;\n    }\n\n    return new CoverageSummary(obj);\n  },\n\n  /**\n   * creates a CoverageMap object\n   * @param {Object} obj optional - an argument with the same semantics\n   *  as the one passed to the CoverageMap constructor.\n   * @returns {CoverageMap}\n   */\n  createCoverageMap(obj) {\n    if (obj && obj instanceof CoverageMap) {\n      return obj;\n    }\n\n    return new CoverageMap(obj);\n  },\n\n  /**\n   * creates a FileCoverage object\n   * @param {Object} obj optional - an argument with the same semantics\n   *  as the one passed to the FileCoverage constructor.\n   * @returns {FileCoverage}\n   */\n  createFileCoverage(obj) {\n    if (obj && obj instanceof FileCoverage) {\n      return obj;\n    }\n\n    return new FileCoverage(obj);\n  }\n\n};\n/** classes exported for reuse */\n\nmodule.exports.classes = {\n  /**\n   * the file coverage constructor\n   */\n  FileCoverage\n};","map":null,"metadata":{},"sourceType":"script"}