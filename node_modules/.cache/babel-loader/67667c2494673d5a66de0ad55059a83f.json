{"ast":null,"code":"/*\n Copyright 2012-2015, Yahoo Inc.\n Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.\n */\nconst fs = require('fs');\n\nconst FileWriter = require('./file-writer');\n\nconst XMLWriter = require('./xml-writer');\n\nconst tree = require('./tree');\n\nconst watermarks = require('./watermarks');\n\nfunction defaultSourceLookup(path) {\n  try {\n    return fs.readFileSync(path, 'utf8');\n  } catch (ex) {\n    throw new Error('Unable to lookup source: ' + path + '(' + ex.message + ')');\n  }\n}\n\nfunction mergeWatermarks(specified, defaults) {\n  specified = specified || {};\n  Object.keys(defaults).forEach(k => {\n    const specValue = specified[k];\n\n    if (!(specValue && Array.isArray(specValue) && specValue.length === 2)) {\n      specified[k] = defaults[k];\n    }\n  });\n  return specified;\n}\n/**\n * A reporting context that is passed to report implementations\n * @param {Object} [opts=null] opts options\n * @param {String} [opts.dir='coverage'] opts.dir the reporting directory\n * @param {Object} [opts.watermarks=null] opts.watermarks watermarks for\n *  statements, lines, branches and functions\n * @param {Function} [opts.sourceFinder=fsLookup] opts.sourceFinder a\n *  function that returns source code given a file path. Defaults to\n *  filesystem lookups based on path.\n * @constructor\n */\n\n\nfunction Context(opts) {\n  opts = opts || {};\n  this.dir = opts.dir || 'coverage';\n  this.watermarks = mergeWatermarks(opts.watermarks, watermarks.getDefault());\n  this.sourceFinder = opts.sourceFinder || defaultSourceLookup;\n  this.data = {};\n}\n\nObject.defineProperty(Context.prototype, 'writer', {\n  enumerable: true,\n\n  get() {\n    if (!this.data.writer) {\n      this.data.writer = new FileWriter(this.dir);\n    }\n\n    return this.data.writer;\n  }\n\n});\n/**\n * returns a FileWriter implementation for reporting use. Also available\n * as the `writer` property on the context.\n * @returns {Writer}\n */\n\nContext.prototype.getWriter = function () {\n  return this.writer;\n};\n/**\n * returns the source code for the specified file path or throws if\n * the source could not be found.\n * @param {String} filePath the file path as found in a file coverage object\n * @returns {String} the source code\n */\n\n\nContext.prototype.getSource = function (filePath) {\n  return this.sourceFinder(filePath);\n};\n/**\n * returns the coverage class given a coverage\n * types and a percentage value.\n * @param {String} type - the coverage type, one of `statements`, `functions`,\n *  `branches`, or `lines`\n * @param {Number} value - the percentage value\n * @returns {String} one of `high`, `medium` or `low`\n */\n\n\nContext.prototype.classForPercent = function (type, value) {\n  const watermarks = this.watermarks[type];\n\n  if (!watermarks) {\n    return 'unknown';\n  }\n\n  if (value < watermarks[0]) {\n    return 'low';\n  }\n\n  if (value >= watermarks[1]) {\n    return 'high';\n  }\n\n  return 'medium';\n};\n/**\n * returns an XML writer for the supplied content writer\n * @param {ContentWriter} contentWriter the content writer to which the returned XML writer\n *  writes data\n * @returns {XMLWriter}\n */\n\n\nContext.prototype.getXMLWriter = function (contentWriter) {\n  return new XMLWriter(contentWriter);\n};\n/**\n * returns a full visitor given a partial one.\n * @param {Object} partialVisitor a partial visitor only having the functions of\n *  interest to the caller. These functions are called with a scope that is the\n *  supplied object.\n * @returns {Visitor}\n */\n\n\nContext.prototype.getVisitor = function (partialVisitor) {\n  return new tree.Visitor(partialVisitor);\n};\n\nmodule.exports = {\n  create(opts) {\n    return new Context(opts);\n  }\n\n};","map":null,"metadata":{},"sourceType":"script"}