{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.widgetType = exports.TradingViewEmbed = void 0;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _propTypes = require(\"prop-types\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nfunction _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nvar WIDGET_LINKS = {\n  \"ADVANCED_CHART\": [\"Chart\", \"https://www.tradingview.com/symbols/\"],\n  \"COMPANY_PROFILE\": [\"Profile\", \"https://www.tradingview.com/symbols/\"],\n  \"ECONOMIC_CALENDAR\": [\"Economic Calendar\", \"https://www.tradingview.com/markets/currencies/economic-calendar/\"],\n  \"FOREX_CROSS_RATES\": [\"Forex Rates\", \"https://www.tradingview.com/markets/currencies/forex-cross-rates/\"],\n  \"FOREX_HEATMAP\": [\"Forex Heat Map\", \"https://www.tradingview.com/markets/currencies/forex-heat-map/\"],\n  \"FUNDAMENTAL_DATA\": [\"Fundamental Data\", \"https://www.tradingview.com/symbols/\"],\n  \"MARKET_DATA\": [\"Market Data\", \"https://www.tradingview.com\"],\n  \"MARKET_OVERVIEW\": [\"Market Data\", \"https://www.tradingview.com\"],\n  \"MINI_CHART\": [\"Rates\", \"https://www.tradingview.com/symbols/\"],\n  \"SCREENER\": [\"Forex Screener\", \"https://www.tradingview.com/forex-screener/\"],\n  \"SCREENER_CRYPTOCURRENCY\": [\"Cryptocurrency Markets\", \"https://www.tradingview.com/markets/cryptocurrencies/prices-all/\"],\n  \"SYMBOL_INFO\": [\"Symbol Info\", \"https://www.tradingview.com/symbols/\"],\n  \"SYMBOL_OVERVIEW\": [\"Quotes\", \"https://www.tradingview.com\"],\n  \"STOCK_MARKET\": [\"Stock Market\", \"https://www.tradingview.com/markets/stocks-usa/market-movers-gainers/\"],\n  \"TECHNICAL_ANALYSIS\": [\"Technical Analysis\", \"https://www.tradingview.com/symbols/NASDAQ-GOOG/technicals/\"],\n  \"TICKER\": [\"Quotes\", \"https://www.tradingview.com\"],\n  \"TICKER_SINGLE\": [\"Rates\", \"https://www.tradingview.com/symbols/\"],\n  \"TICKER_TAPE\": [\"Ticker Tape\", \"https://www.tradingview.com\"]\n};\nvar WIDGETS_URLS = {\n  \"ADVANCED_CHART\": \"https://s3.tradingview.com/tv.js\",\n  \"COMPANY_PROFILE\": \"https://s3.tradingview.com/external-embedding/embed-widget-symbol-profile.js\",\n  \"ECONOMIC_CALENDAR\": \"https://s3.tradingview.com/external-embedding/embed-widget-events.js\",\n  \"FOREX_CROSS_RATES\": \"https://s3.tradingview.com/external-embedding/embed-widget-forex-cross-rates.js\",\n  \"FOREX_HEATMAP\": \"https://s3.tradingview.com/external-embedding/embed-widget-forex-heat-map.js\",\n  \"FUNDAMENTAL_DATA\": \"https://s3.tradingview.com/external-embedding/embed-widget-financials.js\",\n  \"MARKET_DATA\": \"https://s3.tradingview.com/external-embedding/embed-widget-market-quotes.js\",\n  \"MARKET_OVERVIEW\": \"https://s3.tradingview.com/external-embedding/embed-widget-market-overview.js\",\n  \"MINI_CHART\": \"https://s3.tradingview.com/external-embedding/embed-widget-mini-symbol-overview.js\",\n  \"SCREENER\": \"https://s3.tradingview.com/external-embedding/embed-widget-screener.js\",\n  \"SCREENER_CRYPTOCURRENCY\": \"https://s3.tradingview.com/external-embedding/embed-widget-screener.js\",\n  \"SYMBOL_INFO\": \"https://s3.tradingview.com/external-embedding/embed-widget-symbol-info.js\",\n  \"SYMBOL_OVERVIEW\": \"https://s3.tradingview.com/tv.js\",\n  \"STOCK_MARKET\": \"https://s3.tradingview.com/external-embedding/embed-widget-hotlists.js\",\n  \"TECHNICAL_ANALYSIS\": \"https://s3.tradingview.com/external-embedding/embed-widget-technical-analysis.js\",\n  \"TICKER\": \"https://s3.tradingview.com/external-embedding/embed-widget-tickers.js\",\n  \"TICKER_SINGLE\": \"https://s3.tradingview.com/external-embedding/embed-widget-single-quote.js\",\n  \"TICKER_TAPE\": \"https://s3.tradingview.com/external-embedding/embed-widget-ticker-tape.js\"\n};\n\nfunction buildHtml(widgetType) {\n  var script = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  var id = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n  var copyrightLink = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n  var baseHtml = \"<!-- TradingView Widget BEGIN -->\";\n  baseHtml += \"<div class=\\\"tradingview-widget-container\\\">\";\n  baseHtml += id ? \"<div id=\\\"\".concat(id, \"\\\"></div>\") : \"\";\n  baseHtml += '<div class=\"tradingview-widget-container__widget\"></div>';\n  baseHtml += copyrightLink ? \"<div class=\\\"tradingview-widget-copyright\\\">\\n      <a href=\\\"\".concat(WIDGET_LINKS[widgetType][1], \"\\\" rel=\\\"noopener\\\" target=\\\"_blank\\\">\\n        <span class=\\\"blue-text\\\">\").concat(WIDGET_LINKS[widgetType][0], \"</span>\\n      </a> by TradingView\\n    </div>\") : \"\";\n  baseHtml += \"<script type=\\\"text/javascript\\\" src=\\\"\".concat(WIDGETS_URLS[widgetType], \"\\\" async>\");\n  baseHtml += script ? \"\".concat(script, \"</script></div>\") : \"</script></div>\";\n  baseHtml += \"<!-- TradingView Widget END -->\";\n  return baseHtml;\n}\n\nfunction getTradingViewObj() {\n  var widget = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"widget\";\n  /* global TradingView */\n\n  return TradingView[widget];\n}\n/*\r\n *\r\n * Widgets\r\n */\n// Advanced Chart\n\n\nfunction widgetAdvancedChart(count, copyrightLink) {\n  var widgetHtml = buildHtml(\"ADVANCED_CHART\", null, \"tradingview_AC_\".concat(count), copyrightLink);\n  return widgetHtml;\n}\n\nfunction widgetAdvancedChartOnload(script, count) {\n  var widgetConfig = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  var defaultConfigAdvancedChart = {\n    \"symbol\": \"NASDAQ:GOOG\",\n    \"timezone\": \"Etc/UTC\",\n    \"interval\": \"D\",\n    \"style\": \"1\",\n    \"toolbar_bg\": \"#f1f3f6\",\n    \"enable_publishing\": false,\n    \"withdateranges\": true,\n    \"range\": \"ytd\",\n    \"hide_side_toolbar\": false,\n    \"allow_symbol_change\": true,\n    \"watchlist\": false,\n    \"details\": false,\n    \"hotlist\": false,\n    \"calendar\": false,\n    \"news\": false,\n    \"show_popup_button\": true,\n    \"popup_width\": \"1000\",\n    \"popup_height\": \"650\",\n    \"no_referral_id\": true,\n    \"referral_id\": \"\",\n    \"width\": 980,\n    \"height\": 610,\n    \"colorTheme\": \"light\",\n    \"locale\": \"en\",\n    \"autosize\": false\n  };\n  var config = Object.assign(defaultConfigAdvancedChart, widgetConfig);\n  var symbol = config.symbol,\n      timezone = config.timezone,\n      interval = config.interval,\n      style = config.style,\n      toolbar_bg = config.toolbar_bg,\n      enable_publishing = config.enable_publishing,\n      withdateranges = config.withdateranges,\n      range = config.range,\n      hide_side_toolbar = config.hide_side_toolbar,\n      allow_symbol_change = config.allow_symbol_change,\n      details = config.details,\n      hotlist = config.hotlist,\n      calendar = config.calendar,\n      show_popup_button = config.show_popup_button,\n      popup_width = config.popup_width,\n      popup_height = config.popup_height,\n      no_referral_id = config.no_referral_id,\n      referral_id = config.referral_id,\n      width = config.width,\n      height = config.height,\n      colorTheme = config.colorTheme,\n      locale = config.locale,\n      autosize = config.autosize,\n      news = config.news,\n      studies = config.studies,\n      watchlist = config.watchlist;\n  no_referral_id = referral_id === \"\" ? true : false;\n  var refKey = no_referral_id ? \"no_referral_id\" : \"referral_id\";\n  var refId = no_referral_id ? true : referral_id;\n\n  if (autosize) {\n    width = \"100%\";\n    height = \"100%\";\n  } // onload\n\n\n  script.onload = function () {\n    if (typeof TradingView === \"undefined\") {\n      return;\n    } else {\n      var TV = getTradingViewObj();\n      var _config = {\n        \"symbol\": symbol,\n        \"timezone\": timezone,\n        \"interval\": interval,\n        \"style\": style,\n        \"toolbar_bg\": toolbar_bg,\n        \"hide_side_toolbar\": hide_side_toolbar,\n        \"withdateranges\": withdateranges,\n        \"range\": range,\n        \"allow_symbol_change\": allow_symbol_change,\n        \"details\": details,\n        \"hotlist\": hotlist,\n        \"calendar\": calendar,\n        \"news\": news,\n        \"studies\": studies,\n        \"watchlist\": watchlist,\n        \"show_popup_button\": show_popup_button,\n        \"popup_width\": popup_width,\n        \"popup_height\": popup_height,\n        \"width\": width,\n        \"height\": height,\n        \"enable_publishing\": enable_publishing,\n        \"theme\": colorTheme,\n        \"locale\": locale,\n        \"container_id\": \"tradingview_AC_\".concat(count)\n      };\n      _config[refKey] = refId;\n      new TV(_config);\n    }\n  };\n} // Company Profile\n\n\nfunction widgetCompanyProfile() {\n  var widgetConfig = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var copyrightLink = arguments.length > 1 ? arguments[1] : undefined;\n  var defaultConfigCompanyProfile = {\n    \"symbol\": \"NASDAQ:GOOG\",\n    \"width\": 480,\n    \"height\": 650,\n    \"colorTheme\": \"light\",\n    \"isTransparent\": false,\n    \"locale\": \"en\",\n    \"autosize\": false\n  };\n  var config = Object.assign(defaultConfigCompanyProfile, widgetConfig);\n  var symbol = config.symbol,\n      width = config.width,\n      height = config.height,\n      colorTheme = config.colorTheme,\n      isTransparent = config.isTransparent,\n      locale = config.locale,\n      autosize = config.autosize;\n\n  if (autosize) {\n    width = \"100%\";\n    height = \"100%\";\n  }\n\n  var widgetHtml = buildHtml(\"COMPANY_PROFILE\", \"{\\n      \\\"symbol\\\": \\\"\".concat(symbol, \"\\\",\\n      \\\"width\\\": \\\"\").concat(width, \"\\\",\\n      \\\"height\\\": \\\"\").concat(height, \"\\\",\\n      \\\"colorTheme\\\": \\\"\").concat(colorTheme, \"\\\",\\n      \\\"isTransparent\\\": \").concat(isTransparent, \",\\n      \\\"locale\\\": \\\"\").concat(locale, \"\\\"\\n    }\"), null, copyrightLink);\n  return widgetHtml;\n} // Economic Calander\n\n\nfunction widgetEconomicCalendar() {\n  var widgetConfig = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var copyrightLink = arguments.length > 1 ? arguments[1] : undefined;\n  var defaultConfigEconomicCalendar = {\n    \"width\": 510,\n    \"height\": 600,\n    \"colorTheme\": \"light\",\n    \"isTransparent\": false,\n    \"locale\": \"en\",\n    \"importanceFilter\": \"-1,0,1\",\n    \"autosize\": false\n  };\n  var config = Object.assign(defaultConfigEconomicCalendar, widgetConfig);\n  var width = config.width,\n      height = config.height,\n      colorTheme = config.colorTheme,\n      isTransparent = config.isTransparent,\n      locale = config.locale,\n      autosize = config.autosize,\n      importanceFilter = config.importanceFilter;\n\n  if (autosize) {\n    width = \"100%\";\n    height = \"100%\";\n  }\n\n  var widgetHtml = buildHtml(\"ECONOMIC_CALENDAR\", \"{\\n      \\\"width\\\": \\\"\".concat(width, \"\\\",\\n      \\\"height\\\": \\\"\").concat(height, \"\\\",\\n      \\\"colorTheme\\\": \\\"\").concat(colorTheme, \"\\\",\\n      \\\"isTransparent\\\": \").concat(isTransparent, \",\\n      \\\"locale\\\": \\\"\").concat(locale, \"\\\",\\n      \\\"importanceFilter\\\": \\\"\").concat(importanceFilter, \"\\\"\\n    }\"), null, copyrightLink);\n  return widgetHtml;\n} // Forex Cross Rates\n\n\nfunction widgetForexCrossRates() {\n  var widgetConfig = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var copyrightLink = arguments.length > 1 ? arguments[1] : undefined;\n  var defaultConfigForexCrossRates = {\n    \"currencies\": [\"EUR\", \"USD\", \"JPY\", \"GBP\", \"CHF\", \"AUD\", \"CAD\", \"NZD\", \"CNY\"],\n    \"width\": 770,\n    \"height\": 400,\n    \"locale\": \"en\",\n    \"autosize\": false\n  };\n  var config = Object.assign(defaultConfigForexCrossRates, widgetConfig);\n  var currencies = config.currencies,\n      width = config.width,\n      height = config.height,\n      locale = config.locale,\n      autosize = config.autosize;\n\n  if (autosize) {\n    width = \"100%\";\n    height = \"100%\";\n  }\n\n  var widgetHtml = buildHtml(\"FOREX_CROSS_RATES\", \"{\\n      \\\"currencies\\\": \".concat(JSON.stringify(currencies), \",\\n      \\\"width\\\": \\\"\").concat(width, \"\\\",\\n      \\\"height\\\": \\\"\").concat(height, \"\\\",\\n      \\\"locale\\\": \\\"\").concat(locale, \"\\\"\\n    }\"), null, copyrightLink);\n  return widgetHtml;\n} // Forex Heatmap\n\n\nfunction widgetForexHeatmap() {\n  var widgetConfig = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var copyrightLink = arguments.length > 1 ? arguments[1] : undefined;\n  var defaultConfigForexHeatmap = {\n    \"currencies\": [\"EUR\", \"USD\", \"JPY\", \"GBP\", \"CHF\", \"AUD\", \"CAD\", \"NZD\", \"CNY\"],\n    \"width\": 770,\n    \"height\": 400,\n    \"locale\": \"en\",\n    \"autosize\": false\n  };\n  var config = Object.assign(defaultConfigForexHeatmap, widgetConfig);\n  var currencies = config.currencies,\n      width = config.width,\n      height = config.height,\n      locale = config.locale,\n      autosize = config.autosize;\n\n  if (autosize) {\n    width = \"100%\";\n    height = \"100%\";\n  }\n\n  var widgetHtml = buildHtml(\"FOREX_HEATMAP\", \"{\\n      \\\"currencies\\\": \".concat(JSON.stringify(currencies), \",\\n      \\\"width\\\": \\\"\").concat(width, \"\\\",\\n      \\\"height\\\": \\\"\").concat(height, \"\\\",\\n      \\\"locale\\\": \\\"\").concat(locale, \"\\\"\\n    }\"), null, copyrightLink);\n  return widgetHtml;\n} // Fundamental Data\n\n\nfunction widgetFundamentalData() {\n  var widgetConfig = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var copyrightLink = arguments.length > 1 ? arguments[1] : undefined;\n  var defaultConfigFundamentalData = {\n    \"symbol\": \"NASDAQ:GOOG\",\n    \"largeChartUrl\": \"\",\n    \"width\": 480,\n    \"height\": 830,\n    \"colorTheme\": \"light\",\n    \"isTransparent\": false,\n    \"displayMode\": \"regular\",\n    \"locale\": \"en\",\n    \"autosize\": false\n  };\n  var config = Object.assign(defaultConfigFundamentalData, widgetConfig);\n  var symbol = config.symbol,\n      largeChartUrl = config.largeChartUrl,\n      width = config.width,\n      height = config.height,\n      colorTheme = config.colorTheme,\n      isTransparent = config.isTransparent,\n      displayMode = config.displayMode,\n      locale = config.locale,\n      autosize = config.autosize;\n\n  if (autosize) {\n    width = \"100%\";\n    height = \"100%\";\n  }\n\n  var widgetHtml = buildHtml(\"FUNDAMENTAL_DATA\", \"{\\n      \\\"symbol\\\": \\\"\".concat(symbol, \"\\\",\\n      \\\"largeChartUrl\\\": \\\"\").concat(largeChartUrl, \"\\\",\\n      \\\"width\\\": \\\"\").concat(width, \"\\\",\\n      \\\"height\\\": \\\"\").concat(height, \"\\\",\\n      \\\"colorTheme\\\": \\\"\").concat(colorTheme, \"\\\",\\n      \\\"isTransparent\\\": \").concat(isTransparent, \",\\n      \\\"displayMode\\\": \\\"\").concat(displayMode, \"\\\",\\n      \\\"locale\\\": \\\"\").concat(locale, \"\\\"\\n    }\"), null, copyrightLink);\n  return widgetHtml;\n} // Market Data\n\n\nfunction widgetMarketData() {\n  var widgetConfig = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var copyrightLink = arguments.length > 1 ? arguments[1] : undefined;\n  var defaultConfigMarketData = {\n    \"symbolsGroups\": [{\n      \"originalName\": \"Indices\",\n      \"symbols\": [{\n        \"displayName\": \"S&P 500\",\n        \"name\": \"OANDA:SPX500USD\"\n      }, {\n        \"displayName\": \"Nasdaq 100\",\n        \"name\": \"OANDA:NAS100USD\"\n      }, {\n        \"displayName\": \"Dow 30\",\n        \"name\": \"FOREXCOM:DJI\"\n      }, {\n        \"displayName\": \"Nikkei 225\",\n        \"name\": \"INDEX:NKY\"\n      }, {\n        \"displayName\": \"DAX Index\",\n        \"name\": \"INDEX:DEU30\"\n      }, {\n        \"displayName\": \"FTSE 100\",\n        \"name\": \"OANDA:UK100GBP\"\n      }],\n      \"name\": \"Indices\"\n    }, {\n      \"originalName\": \"Commodities\",\n      \"symbols\": [{\n        \"displayName\": \"E-Mini S&P\",\n        \"name\": \"CME_MINI:ES1!\"\n      }, {\n        \"displayName\": \"Euro\",\n        \"name\": \"CME:6E1!\"\n      }, {\n        \"displayName\": \"Gold\",\n        \"name\": \"COMEX:GC1!\"\n      }, {\n        \"displayName\": \"Crude Oil\",\n        \"name\": \"NYMEX:CL1!\"\n      }, {\n        \"displayName\": \"Natural Gas\",\n        \"name\": \"NYMEX:NG1!\"\n      }, {\n        \"displayName\": \"Corn\",\n        \"name\": \"CBOT:ZC1!\"\n      }],\n      \"name\": \"Commodities\"\n    }, {\n      \"originalName\": \"Bonds\",\n      \"symbols\": [{\n        \"displayName\": \"Eurodollar\",\n        \"name\": \"CME:GE1!\"\n      }, {\n        \"displayName\": \"T-Bond\",\n        \"name\": \"CBOT:ZB1!\"\n      }, {\n        \"displayName\": \"Ultra T-Bond\",\n        \"name\": \"CBOT:UB1!\"\n      }, {\n        \"displayName\": \"Euro Bund\",\n        \"name\": \"EUREX:FGBL1!\"\n      }, {\n        \"displayName\": \"Euro BTP\",\n        \"name\": \"EUREX:FBTP1!\"\n      }, {\n        \"displayName\": \"Euro BOBL\",\n        \"name\": \"EUREX:FGBM1!\"\n      }],\n      \"name\": \"Bonds\"\n    }, {\n      \"originalName\": \"Forex\",\n      \"symbols\": [{\n        \"name\": \"FX:EURUSD\"\n      }, {\n        \"name\": \"FX:GBPUSD\"\n      }, {\n        \"name\": \"FX:USDJPY\"\n      }, {\n        \"name\": \"FX:USDCHF\"\n      }, {\n        \"name\": \"FX:AUDUSD\"\n      }, {\n        \"name\": \"FX:USDCAD\"\n      }],\n      \"name\": \"Forex\"\n    }],\n    \"largeChartUrl\": \"\",\n    \"width\": 770,\n    \"height\": 450,\n    \"locale\": \"en\",\n    \"autosize\": false\n  };\n  var config = Object.assign(defaultConfigMarketData, widgetConfig);\n  var symbolsGroups = config.symbolsGroups,\n      largeChartUrl = config.largeChartUrl,\n      width = config.width,\n      height = config.height,\n      locale = config.locale,\n      autosize = config.autosize;\n\n  if (autosize) {\n    width = \"100%\";\n    height = \"100%\";\n  }\n\n  var widgetHtml = buildHtml(\"MARKET_DATA\", \"{\\n      \\\"symbolsGroups\\\": \".concat(JSON.stringify(symbolsGroups), \",\\n      \\\"largeChartUrl\\\": \\\"\").concat(largeChartUrl, \"\\\",\\n      \\\"locale\\\": \\\"\").concat(locale, \"\\\",\\n      \\\"width\\\": \\\"\").concat(width, \"\\\",\\n      \\\"height\\\": \\\"\").concat(height, \"\\\"\\n    }\"), null, copyrightLink);\n  return widgetHtml;\n} // Market Overview\n\n\nfunction widgetMarketOverview() {\n  var widgetConfig = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var copyrightLink = arguments.length > 1 ? arguments[1] : undefined;\n  var defaultConfigMarketOverview = {\n    \"tabs\": [{\n      \"title\": \"Indices\",\n      \"symbols\": [{\n        \"s\": \"OANDA:SPX500USD\",\n        \"d\": \"S&P 500\"\n      }, {\n        \"s\": \"OANDA:NAS100USD\",\n        \"d\": \"Nasdaq 100\"\n      }, {\n        \"s\": \"FOREXCOM:DJI\",\n        \"d\": \"Dow 30\"\n      }, {\n        \"s\": \"INDEX:NKY\",\n        \"d\": \"Nikkei 225\"\n      }, {\n        \"s\": \"INDEX:DEU30\",\n        \"d\": \"DAX Index\"\n      }, {\n        \"s\": \"OANDA:UK100GBP\",\n        \"d\": \"FTSE 100\"\n      }],\n      \"originalTitle\": \"Indices\"\n    }, {\n      \"title\": \"Commodities\",\n      \"symbols\": [{\n        \"s\": \"CME_MINI:ES1!\",\n        \"d\": \"E-Mini S&P\"\n      }, {\n        \"s\": \"CME:6E1!\",\n        \"d\": \"Euro\"\n      }, {\n        \"s\": \"COMEX:GC1!\",\n        \"d\": \"Gold\"\n      }, {\n        \"s\": \"NYMEX:CL1!\",\n        \"d\": \"Crude Oil\"\n      }, {\n        \"s\": \"NYMEX:NG1!\",\n        \"d\": \"Natural Gas\"\n      }, {\n        \"s\": \"CBOT:ZC1!\",\n        \"d\": \"Corn\"\n      }],\n      \"originalTitle\": \"Commodities\"\n    }, {\n      \"title\": \"Bonds\",\n      \"symbols\": [{\n        \"s\": \"CME:GE1!\",\n        \"d\": \"Eurodollar\"\n      }, {\n        \"s\": \"CBOT:ZB1!\",\n        \"d\": \"T-Bond\"\n      }, {\n        \"s\": \"CBOT:UB1!\",\n        \"d\": \"Ultra T-Bond\"\n      }, {\n        \"s\": \"EUREX:FGBL1!\",\n        \"d\": \"Euro Bund\"\n      }, {\n        \"s\": \"EUREX:FBTP1!\",\n        \"d\": \"Euro BTP\"\n      }, {\n        \"s\": \"EUREX:FGBM1!\",\n        \"d\": \"Euro BOBL\"\n      }],\n      \"originalTitle\": \"Bonds\"\n    }, {\n      \"title\": \"Forex\",\n      \"symbols\": [{\n        \"s\": \"FX:EURUSD\"\n      }, {\n        \"s\": \"FX:GBPUSD\"\n      }, {\n        \"s\": \"FX:USDJPY\"\n      }, {\n        \"s\": \"FX:USDCHF\"\n      }, {\n        \"s\": \"FX:AUDUSD\"\n      }, {\n        \"s\": \"FX:USDCAD\"\n      }],\n      \"originalTitle\": \"Forex\"\n    }],\n    \"dateRange\": \"12m\",\n    \"plotLineColorGrowing\": \"rgba(33, 150, 243, 1)\",\n    \"plotLineColorFalling\": \"rgba(33, 150, 243, 1)\",\n    \"gridLineColor\": \"rgba(233, 233, 234, 1)\",\n    \"scaleFontColor\": \"rgba(120, 123, 134, 1)\",\n    \"belowLineFillColorGrowing\": \"rgba(33, 150, 243, 0.12)\",\n    \"belowLineFillColorFalling\": \"rgba(33, 150, 243, 0.12)\",\n    \"symbolActiveColor\": \"rgba(33, 150, 243, 0.12)\",\n    \"showChart\": true,\n    \"largeChartUrl\": \"\",\n    \"width\": 400,\n    \"height\": 660,\n    \"colorTheme\": \"light\",\n    \"isTransparent\": false,\n    \"displayMode\": \"regular\",\n    \"locale\": \"en\",\n    \"autosize\": false\n  };\n  var config = Object.assign(defaultConfigMarketOverview, widgetConfig);\n  var tabs = config.tabs,\n      dateRange = config.dateRange,\n      plotLineColorGrowing = config.plotLineColorGrowing,\n      plotLineColorFalling = config.plotLineColorFalling,\n      gridLineColor = config.gridLineColor,\n      scaleFontColor = config.scaleFontColor,\n      belowLineFillColorGrowing = config.belowLineFillColorGrowing,\n      belowLineFillColorFalling = config.belowLineFillColorFalling,\n      symbolActiveColor = config.symbolActiveColor,\n      showChart = config.showChart,\n      largeChartUrl = config.largeChartUrl,\n      width = config.width,\n      height = config.height,\n      colorTheme = config.colorTheme,\n      isTransparent = config.isTransparent,\n      locale = config.locale,\n      autosize = config.autosize;\n\n  if (autosize) {\n    width = \"100%\";\n    height = \"100%\";\n  }\n\n  var widgetHtml = buildHtml(\"MARKET_OVERVIEW\", \"{\\n      \\\"tabs\\\": \".concat(JSON.stringify(tabs), \",\\n      \\\"dateRange\\\": \\\"\").concat(dateRange, \"\\\",\\n      \\\"plotLineColorGrowing\\\": \\\"\").concat(plotLineColorGrowing, \"\\\",\\n      \\\"plotLineColorFalling\\\": \\\"\").concat(plotLineColorFalling, \"\\\",\\n      \\\"gridLineColor\\\": \\\"\").concat(gridLineColor, \"\\\",\\n      \\\"scaleFontColor\\\": \\\"\").concat(scaleFontColor, \"\\\",\\n      \\\"belowLineFillColorGrowing\\\": \\\"\").concat(belowLineFillColorGrowing, \"\\\",\\n      \\\"belowLineFillColorFalling\\\": \\\"\").concat(belowLineFillColorFalling, \"\\\",\\n      \\\"symbolActiveColor\\\": \\\"\").concat(symbolActiveColor, \"\\\",\\n      \\\"showChart\\\": \").concat(showChart, \",\\n      \\\"largeChartUrl\\\": \\\"\").concat(largeChartUrl, \"\\\",\\n      \\\"width\\\": \\\"\").concat(width, \"\\\",\\n      \\\"height\\\": \\\"\").concat(height, \"\\\",\\n      \\\"colorTheme\\\": \\\"\").concat(colorTheme, \"\\\",\\n      \\\"isTransparent\\\": \").concat(isTransparent, \",\\n      \\\"locale\\\": \\\"\").concat(locale, \"\\\"\\n    }\"), null, copyrightLink);\n  return widgetHtml;\n} // Mini Chart\n\n\nfunction widgetMiniChart() {\n  var widgetConfig = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var copyrightLink = arguments.length > 1 ? arguments[1] : undefined;\n  var defaultConfigMiniChart = {\n    \"symbol\": \"BITMEX:XBTUSD\",\n    \"dateRange\": \"12m\",\n    \"trendLineColor\": \"#37a6ef\",\n    \"underLineColor\": \"rgba(55, 166, 239, 0.15)\",\n    \"largeChartUrl\": \"\",\n    \"width\": 350,\n    \"height\": 220,\n    \"colorTheme\": \"light\",\n    \"isTransparent\": false,\n    \"locale\": \"en\",\n    \"autosize\": false\n  };\n  var config = Object.assign(defaultConfigMiniChart, widgetConfig);\n  var symbol = config.symbol,\n      dateRange = config.dateRange,\n      trendLineColor = config.trendLineColor,\n      underLineColor = config.underLineColor,\n      largeChartUrl = config.largeChartUrl,\n      width = config.width,\n      height = config.height,\n      colorTheme = config.colorTheme,\n      isTransparent = config.isTransparent,\n      locale = config.locale,\n      autosize = config.autosize;\n\n  if (autosize) {\n    width = \"100%\";\n    height = \"100%\";\n  }\n\n  if (colorTheme === \"dark\") {\n    underLineColor = \"rgba(55, 166, 239, 0.15)\";\n  }\n\n  var widgetHtml = buildHtml(\"MINI_CHART\", \"{\\n      \\\"symbol\\\": \\\"\".concat(symbol, \"\\\",\\n      \\\"dateRange\\\": \\\"\").concat(dateRange, \"\\\",\\n      \\\"trendLineColor\\\": \\\"\").concat(trendLineColor, \"\\\",\\n      \\\"underLineColor\\\": \\\"\").concat(underLineColor, \"\\\",\\n      \\\"largeChartUrl\\\": \\\"\").concat(largeChartUrl, \"\\\",\\n      \\\"width\\\": \\\"\").concat(width, \"\\\",\\n      \\\"height\\\": \\\"\").concat(height, \"\\\",\\n      \\\"colorTheme\\\": \\\"\").concat(colorTheme, \"\\\",\\n      \\\"isTransparent\\\": \").concat(isTransparent, \",\\n      \\\"locale\\\": \\\"\").concat(locale, \"\\\"\\n    }\"), null, copyrightLink);\n  return widgetHtml;\n} // Screener\n\n\nfunction widgetScreener() {\n  var widgetConfig = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var copyrightLink = arguments.length > 1 ? arguments[1] : undefined;\n  var defaultConfigScreener = {\n    \"defaultColumn\": \"overview\",\n    \"defaultScreen\": \"general\",\n    \"market\": \"forex\",\n    \"showToolbar\": true,\n    \"largeChartUrl\": \"\",\n    \"width\": 1100,\n    \"height\": 512,\n    \"colorTheme\": \"light\",\n    \"isTransparent\": false,\n    \"locale\": \"en\",\n    \"autosize\": false\n  };\n  var config = Object.assign(defaultConfigScreener, widgetConfig);\n  var defaultColumn = config.defaultColumn,\n      defaultScreen = config.defaultScreen,\n      market = config.market,\n      showToolbar = config.showToolbar,\n      largeChartUrl = config.largeChartUrl,\n      width = config.width,\n      height = config.height,\n      colorTheme = config.colorTheme,\n      isTransparent = config.isTransparent,\n      locale = config.locale,\n      autosize = config.autosize;\n\n  if (autosize) {\n    width = \"100%\";\n    height = \"100%\";\n  }\n\n  var widgetHtml = buildHtml(\"SCREENER\", \"{\\n      \\\"defaultColumn\\\": \\\"\".concat(defaultColumn, \"\\\",\\n      \\\"defaultScreen\\\": \\\"\").concat(defaultScreen, \"\\\",\\n      \\\"market\\\": \\\"\").concat(market, \"\\\",\\n      \\\"showToolbar\\\": \").concat(showToolbar, \",\\n      \\\"largeChartUrl\\\": \\\"\").concat(largeChartUrl, \"\\\",\\n      \\\"width\\\": \\\"\").concat(width, \"\\\",\\n      \\\"height\\\": \\\"\").concat(height, \"\\\",\\n      \\\"colorTheme\\\": \\\"\").concat(colorTheme, \"\\\",\\n      \\\"isTransparent\\\": \").concat(isTransparent, \",\\n      \\\"locale\\\": \\\"\").concat(locale, \"\\\"\\n    }\"), null, copyrightLink);\n  return widgetHtml;\n} // Screener Cryptocurrency\n\n\nfunction widgetScreenerCryptocurrrency() {\n  var widgetConfig = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var copyrightLink = arguments.length > 1 ? arguments[1] : undefined;\n  var defaultConfigScreenerCryptocurrrency = {\n    \"defaultColumn\": \"overview\",\n    \"screener_type\": \"crypto_mkt\",\n    \"displayCurrency\": \"BTC\",\n    \"width\": 1000,\n    \"height\": 490,\n    \"colorTheme\": \"light\",\n    \"isTransparent\": false,\n    \"locale\": \"en\",\n    \"autosize\": false\n  };\n  var config = Object.assign(defaultConfigScreenerCryptocurrrency, widgetConfig);\n  var defaultColumn = config.defaultColumn,\n      screener_type = config.screener_type,\n      displayCurrency = config.displayCurrency,\n      width = config.width,\n      height = config.height,\n      colorTheme = config.colorTheme,\n      isTransparent = config.isTransparent,\n      locale = config.locale,\n      autosize = config.autosize;\n\n  if (autosize) {\n    width = \"100%\";\n    height = \"100%\";\n  }\n\n  var widgetHtml = buildHtml(\"SCREENER_CRYPTOCURRENCY\", \"{\\n      \\\"defaultColumn\\\": \\\"\".concat(defaultColumn, \"\\\",\\n      \\\"screener_type\\\": \\\"\").concat(screener_type, \"\\\",\\n      \\\"displayCurrency\\\": \\\"\").concat(displayCurrency, \"\\\",\\n      \\\"width\\\": \\\"\").concat(width, \"\\\",\\n      \\\"height\\\": \\\"\").concat(height, \"\\\",\\n      \\\"colorTheme\\\": \\\"\").concat(colorTheme, \"\\\",\\n      \\\"isTransparent\\\": \").concat(isTransparent, \",\\n      \\\"locale\\\": \\\"\").concat(locale, \"\\\"\\n    }\"), null, copyrightLink);\n  return widgetHtml;\n} // Symbol Info\n\n\nfunction widgetSymbolInfo() {\n  var widgetConfig = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var copyrightLink = arguments.length > 1 ? arguments[1] : undefined;\n  var defaultConfigSymbolInfo = {\n    \"symbol\": \"BITMEX:XBTUSD\",\n    \"width\": 1000,\n    \"colorTheme\": \"light\",\n    \"isTransparent\": false,\n    \"locale\": \"en\"\n  };\n  var config = Object.assign(defaultConfigSymbolInfo, widgetConfig);\n  var symbol = config.symbol,\n      width = config.width,\n      colorTheme = config.colorTheme,\n      isTransparent = config.isTransparent,\n      locale = config.locale;\n  var widgetHtml = buildHtml(\"SYMBOL_INFO\", \"{\\n      \\\"symbol\\\": \\\"\".concat(symbol, \"\\\",\\n      \\\"width\\\": \\\"\").concat(width, \"\\\",\\n      \\\"colorTheme\\\": \\\"\").concat(colorTheme, \"\\\",\\n      \\\"isTransparent\\\": \").concat(isTransparent, \",\\n      \\\"locale\\\": \\\"\").concat(locale, \"\\\"\\n    }\"), null, copyrightLink);\n  return widgetHtml;\n} // Symbol Overview\n\n\nfunction widgetSymbolOverview(count, copyrightLink) {\n  var widgetHtml = buildHtml(\"SYMBOL_OVERVIEW\", null, \"tradingview_SO_\".concat(count), copyrightLink);\n  return widgetHtml;\n}\n\nfunction widgetSymbolOverviewOnload(script, count) {\n  var widgetConfig = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  var defaultConfigSymbolOverview = {\n    \"symbols\": [[\"Apple\", \"AAPL\"], [\"Google\", \"GOOGL\"], [\"Microsoft\", \"MSFT\"]],\n    \"greyText\": \"Quotes by\",\n    \"gridLineColor\": \"#e9e9ea\",\n    \"fontColor\": \"#83888D\",\n    \"underLineColor\": \"#dbeffb\",\n    \"trendLineColor\": \"#4bafe9\",\n    \"width\": \"1000\",\n    \"height\": \"400\",\n    \"locale\": \"en\",\n    \"chartOnly\": false,\n    \"autosize\": false\n  };\n  var config = Object.assign(defaultConfigSymbolOverview, widgetConfig);\n  var symbols = config.symbols,\n      greyText = config.greyText,\n      gridLineColor = config.gridLineColor,\n      fontColor = config.fontColor,\n      underLineColor = config.underLineColor,\n      trendLineColor = config.trendLineColor,\n      width = config.width,\n      height = config.height,\n      locale = config.locale,\n      chartOnly = config.chartOnly,\n      autosize = config.autosize;\n\n  if (autosize) {\n    width = \"100%\";\n    height = \"100%\";\n  } // onload\n\n\n  script.onload = function () {\n    if (typeof TradingView === \"undefined\") {\n      return;\n    } else {\n      var TV = getTradingViewObj(\"MediumWidget\");\n      var _config2 = {\n        \"symbols\": symbols,\n        \"greyText\": greyText,\n        \"gridLineColor\": gridLineColor,\n        \"fontColor\": fontColor,\n        \"underLineColor\": underLineColor,\n        \"trendLineColor\": trendLineColor,\n        \"width\": width,\n        \"height\": height,\n        \"locale\": locale,\n        \"chartOnly\": chartOnly,\n        \"container_id\": \"tradingview_SO_\".concat(count)\n      };\n      new TV(_config2);\n    }\n  };\n} // Stock Market\n\n\nfunction widgetStockMarket() {\n  var widgetConfig = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var copyrightLink = arguments.length > 1 ? arguments[1] : undefined;\n  var defaultConfigStockMarket = {\n    \"dateRange\": \"12m\",\n    \"exchange\": \"US\",\n    \"plotLineColorGrowing\": \"rgba(33, 150, 243, 1)\",\n    \"plotLineColorFalling\": \"rgba(33, 150, 243, 1)\",\n    \"gridLineColor\": \"rgba(240, 243, 250, 1)\",\n    \"scaleFontColor\": \"rgba(120, 123, 134, 1)\",\n    \"belowLineFillColorGrowing\": \"rgba(33, 150, 243, 0.12)\",\n    \"belowLineFillColorFalling\": \"rgba(33, 150, 243, 0.12)\",\n    \"symbolActiveColor\": \"rgba(33, 150, 243, 0.12)\",\n    \"showChart\": true,\n    \"largeChartUrl\": \"\",\n    \"width\": \"400\",\n    \"height\": \"600\",\n    \"colorTheme\": \"light\",\n    \"isTransparent\": false,\n    \"locale\": \"en\"\n  };\n  var config = Object.assign(defaultConfigStockMarket, widgetConfig);\n  var dateRange = config.dateRange,\n      exchange = config.exchange,\n      plotLineColorGrowing = config.plotLineColorGrowing,\n      plotLineColorFalling = config.plotLineColorFalling,\n      gridLineColor = config.gridLineColor,\n      scaleFontColor = config.scaleFontColor,\n      belowLineFillColorGrowing = config.belowLineFillColorGrowing,\n      belowLineFillColorFalling = config.belowLineFillColorFalling,\n      symbolActiveColor = config.symbolActiveColor,\n      showChart = config.showChart,\n      largeChartUrl = config.largeChartUrl,\n      width = config.width,\n      height = config.height,\n      colorTheme = config.colorTheme,\n      isTransparent = config.isTransparent,\n      locale = config.locale,\n      autosize = config.autosize;\n\n  if (autosize) {\n    width = \"100%\";\n    height = \"100%\";\n  }\n\n  if (colorTheme === \"dark\") {\n    plotLineColorGrowing = \"rgba(25, 118, 210, 1)\";\n    plotLineColorFalling = \"rgba(25, 118, 210, 1)\";\n    gridLineColor = \"rgba(42, 46, 57, 1)\";\n  }\n\n  var widgetHtml = buildHtml(\"STOCK_MARKET\", \"{\\n      \\\"dateRange\\\": \\\"\".concat(dateRange, \"\\\",\\n      \\\"exchange\\\": \\\"\").concat(exchange, \"\\\",\\n      \\\"plotLineColorGrowing\\\": \\\"\").concat(plotLineColorGrowing, \"\\\",\\n      \\\"plotLineColorFalling\\\": \\\"\").concat(plotLineColorFalling, \"\\\",\\n      \\\"gridLineColor\\\": \\\"\").concat(gridLineColor, \"\\\",\\n      \\\"scaleFontColor\\\": \\\"\").concat(scaleFontColor, \"\\\",\\n      \\\"belowLineFillColorGrowing\\\": \\\"\").concat(belowLineFillColorGrowing, \"\\\",\\n      \\\"belowLineFillColorFalling\\\": \\\"\").concat(belowLineFillColorFalling, \"\\\",\\n      \\\"symbolActiveColor\\\": \\\"\").concat(symbolActiveColor, \"\\\",\\n      \\\"showChart\\\": \").concat(showChart, \",\\n      \\\"largeChartUrl\\\": \\\"\").concat(largeChartUrl, \"\\\",\\n      \\\"width\\\": \\\"\").concat(width, \"\\\",\\n      \\\"height\\\": \\\"\").concat(height, \"\\\",\\n      \\\"colorTheme\\\": \\\"\").concat(colorTheme, \"\\\",\\n      \\\"isTransparent\\\": \").concat(isTransparent, \",\\n      \\\"locale\\\": \\\"\").concat(locale, \"\\\"\\n    }\"), null, copyrightLink);\n  return widgetHtml;\n} // Technical Analysis\n\n\nfunction widgetTechnicalAnalysis() {\n  var widgetConfig = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var copyrightLink = arguments.length > 1 ? arguments[1] : undefined;\n  var defaultConfigTechnicalAnalysis = {\n    \"symbol\": \"BTCUSD\",\n    \"showIntervalTabs\": true,\n    \"interval\": \"1m\",\n    \"largeChartUrl\": \"\",\n    \"width\": \"425\",\n    \"height\": \"450\",\n    \"colorTheme\": \"light\",\n    \"isTransparent\": false,\n    \"locale\": \"en\",\n    \"autosize\": false\n  };\n  var config = Object.assign(defaultConfigTechnicalAnalysis, widgetConfig);\n  var symbol = config.symbol,\n      showIntervalTabs = config.showIntervalTabs,\n      interval = config.interval,\n      largeChartUrl = config.largeChartUrl,\n      width = config.width,\n      height = config.height,\n      colorTheme = config.colorTheme,\n      isTransparent = config.isTransparent,\n      locale = config.locale,\n      autosize = config.autosize;\n\n  if (autosize) {\n    width = \"100%\";\n    height = \"100%\";\n  }\n\n  var widgetHtml = buildHtml(\"TECHNICAL_ANALYSIS\", \"{\\n      \\\"symbol\\\": \\\"\".concat(symbol, \"\\\",\\n      \\\"showIntervalTabs\\\": \").concat(showIntervalTabs, \",\\n      \\\"interval\\\": \\\"\").concat(interval, \"\\\",\\n      \\\"largeChartUrl\\\": \\\"\").concat(largeChartUrl, \"\\\",\\n      \\\"width\\\": \\\"\").concat(width, \"\\\",\\n      \\\"height\\\": \\\"\").concat(height, \"\\\",\\n      \\\"colorTheme\\\": \\\"\").concat(colorTheme, \"\\\",\\n      \\\"isTransparent\\\": \").concat(isTransparent, \",\\n      \\\"locale\\\": \\\"\").concat(locale, \"\\\"\\n    }\"), null, copyrightLink);\n  return widgetHtml;\n} // Ticker\n\n\nfunction widgetTicker() {\n  var widgetConfig = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var copyrightLink = arguments.length > 1 ? arguments[1] : undefined;\n  var defaultConfigTicker = {\n    \"symbols\": [{\n      \"title\": \"XBT/USD\",\n      \"proName\": \"BITMEX:XBTUSD\"\n    }, {\n      \"title\": \"BTC/USD\",\n      \"proName\": \"BITSTAMP:BTCUSD\"\n    }, {\n      \"title\": \"ETH/BTC\",\n      \"proName\": \"BITSTAMP:ETHBTC\"\n    }],\n    \"colorTheme\": \"light\",\n    \"isTransparent\": false,\n    \"locale\": \"en\"\n  };\n  var config = Object.assign(defaultConfigTicker, widgetConfig);\n  var symbols = config.symbols,\n      colorTheme = config.colorTheme,\n      isTransparent = config.isTransparent,\n      locale = config.locale;\n  var widgetHtml = buildHtml(\"TICKER\", \"{\\n      \\\"symbols\\\": \".concat(JSON.stringify(symbols), \",\\n      \\\"colorTheme\\\": \\\"\").concat(colorTheme, \"\\\",\\n      \\\"isTransparent\\\": \").concat(isTransparent, \",\\n      \\\"locale\\\": \\\"\").concat(locale, \"\\\"\\n    }\"), null, copyrightLink);\n  return widgetHtml;\n} // Ticker Single\n\n\nfunction widgetTickerSingle() {\n  var widgetConfig = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var copyrightLink = arguments.length > 1 ? arguments[1] : undefined;\n  var defaultConfigTickerSingle = {\n    \"symbol\": \"BITMEX:XBTUSD\",\n    \"width\": 350,\n    \"colorTheme\": \"light\",\n    \"isTransparent\": false,\n    \"locale\": \"en\"\n  };\n  var config = Object.assign(defaultConfigTickerSingle, widgetConfig);\n  var symbol = config.symbol,\n      width = config.width,\n      colorTheme = config.colorTheme,\n      isTransparent = config.isTransparent,\n      locale = config.locale;\n  var widgetHtml = buildHtml(\"TICKER_SINGLE\", \"{\\n      \\\"symbol\\\": \\\"\".concat(symbol, \"\\\",\\n      \\\"width\\\": \\\"\").concat(width, \"\\\",\\n      \\\"colorTheme\\\": \\\"\").concat(colorTheme, \"\\\",\\n      \\\"isTransparent\\\": \").concat(isTransparent, \",\\n      \\\"locale\\\": \\\"\").concat(locale, \"\\\"\\n    }\"), null, copyrightLink);\n  return widgetHtml;\n} // Ticker Tape\n\n\nfunction widgetTickerTape() {\n  var widgetConfig = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var copyrightLink = arguments.length > 1 ? arguments[1] : undefined;\n  var defaultConfigTickerTape = {\n    \"symbols\": [{\n      \"title\": \"XBT/USD\",\n      \"proName\": \"BITMEX:XBTUSD\"\n    }, {\n      \"title\": \"BTC/USD\",\n      \"proName\": \"BITSTAMP:BTCUSD\"\n    }, {\n      \"title\": \"ETH/BTC\",\n      \"proName\": \"BITSTAMP:ETHBTC\"\n    }],\n    \"colorTheme\": \"light\",\n    \"isTransparent\": false,\n    \"displayMode\": \"adaptive\",\n    \"locale\": \"en\"\n  };\n  var config = Object.assign(defaultConfigTickerTape, widgetConfig);\n  var symbols = config.symbols,\n      colorTheme = config.colorTheme,\n      isTransparent = config.isTransparent,\n      displayMode = config.displayMode,\n      locale = config.locale;\n  var widgetHtml = buildHtml(\"TICKER_TAPE\", \"{\\n      \\\"symbols\\\": \".concat(JSON.stringify(symbols), \",\\n      \\\"colorTheme\\\": \\\"\").concat(colorTheme, \"\\\",\\n      \\\"isTransparent\\\": \").concat(isTransparent, \",\\n      \\\"displayMode\\\": \\\"\").concat(displayMode, \"\\\",\\n      \\\"locale\\\": \\\"\").concat(locale, \"\\\"\\n    }\"), null, copyrightLink);\n  return widgetHtml;\n}\n/*\r\n *\r\n * React Component\r\n */\n\n\nvar widgetType = {\n  ADVANCED_CHART: \"ADVANCED_CHART\",\n  COMPANY_PROFILE: \"COMPANY_PROFILE\",\n  ECONOMIC_CALENDAR: \"ECONOMIC_CALENDAR\",\n  FOREX_CROSS_RATES: \"FOREX_CROSS_RATES\",\n  FOREX_HEATMAP: \"FOREX_HEATMAP\",\n  FUNDAMENTAL_DATA: \"FUNDAMENTAL_DATA\",\n  MARKET_DATA: \"MARKET_DATA\",\n  MARKET_OVERVIEW: \"MARKET_OVERVIEW\",\n  MINI_CHART: \"MINI_CHART\",\n  SCREENER: \"SCREENER\",\n  SCREENER_CRYPTOCURRENCY: \"SCREENER_CRYPTOCURRENCY\",\n  SYMBOL_INFO: \"SYMBOL_INFO\",\n  SYMBOL_OVERVIEW: \"SYMBOL_OVERVIEW\",\n  STOCK_MARKET: \"STOCK_MARKET\",\n  TECHNICAL_ANALYSIS: \"TECHNICAL_ANALYSIS\",\n  TICKER: \"TICKER\",\n  TICKER_SINGLE: \"TICKER_SINGLE\",\n  TICKER_TAPE: \"TICKER_TAPE\"\n};\nexports.widgetType = widgetType;\nvar WIDGETS_HTML = {\n  \"ADVANCED_CHART\": widgetAdvancedChart,\n  \"COMPANY_PROFILE\": widgetCompanyProfile,\n  \"ECONOMIC_CALENDAR\": widgetEconomicCalendar,\n  \"FOREX_CROSS_RATES\": widgetForexCrossRates,\n  \"FOREX_HEATMAP\": widgetForexHeatmap,\n  \"FUNDAMENTAL_DATA\": widgetFundamentalData,\n  \"MARKET_DATA\": widgetMarketData,\n  \"MARKET_OVERVIEW\": widgetMarketOverview,\n  \"MINI_CHART\": widgetMiniChart,\n  \"SCREENER\": widgetScreener,\n  \"SCREENER_CRYPTOCURRENCY\": widgetScreenerCryptocurrrency,\n  \"SYMBOL_INFO\": widgetSymbolInfo,\n  \"SYMBOL_OVERVIEW\": widgetSymbolOverview,\n  \"STOCK_MARKET\": widgetStockMarket,\n  \"TECHNICAL_ANALYSIS\": widgetTechnicalAnalysis,\n  \"TICKER\": widgetTicker,\n  \"TICKER_SINGLE\": widgetTickerSingle,\n  \"TICKER_TAPE\": widgetTickerTape\n};\nvar ONLOAD = {\n  \"ADVANCED_CHART\": widgetAdvancedChartOnload,\n  \"SYMBOL_OVERVIEW\": widgetSymbolOverviewOnload\n};\n\nvar TradingViewEmbed =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(TradingViewEmbed, _React$Component);\n\n  function TradingViewEmbed(props) {\n    var _this;\n\n    _classCallCheck(this, TradingViewEmbed);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(TradingViewEmbed).call(this, props));\n    _this.state = {\n      widget: {\n        id: \"\".concat(props.widgetType, \"_1\"),\n        html: null\n      }\n    };\n    return _this;\n  }\n\n  _createClass(TradingViewEmbed, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.setEmbed();\n    }\n  }, {\n    key: \"setEmbed\",\n    value: function setEmbed() {\n      var widgetType = this.props.widgetType;\n      var widgetConfig = this.props.widgetConfig;\n      var elems = document.getElementsByClassName(widgetType);\n      var widgetCount = elems.length + 1; // Add script\n\n      var script = document.createElement(\"script\");\n      script.src = WIDGETS_URLS[this.props.widgetType];\n      var scriptDiv = document.getElementById(this.state.widget.id);\n      scriptDiv.className = widgetType;\n      scriptDiv.append(script); // Build html\n\n      var html;\n\n      if (widgetType === \"ADVANCED_CHART\" || widgetType === \"SYMBOL_OVERVIEW\") {\n        html = WIDGETS_HTML[widgetType](widgetCount, this.props.copyrightLink);\n        ONLOAD[widgetType](script, widgetCount, widgetConfig);\n      } else {\n        html = WIDGETS_HTML[widgetType](widgetConfig, this.props.copyrightLink);\n      } // Update states\n\n\n      var widget = this.state.widget;\n      widget[\"id\"] = \"\".concat(widgetType, \"_\").concat(widgetCount);\n      widget[\"html\"] = html;\n      this.setState({\n        widget: widget\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return _react[\"default\"].createElement(\"div\", {\n        id: this.state.widget.id,\n        dangerouslySetInnerHTML: {\n          __html: this.state.widget.html\n        },\n        style: {\n          width: \"100%\",\n          height: \"100%\"\n        }\n      });\n    }\n  }]);\n\n  return TradingViewEmbed;\n}(_react[\"default\"].Component);\n\nexports.TradingViewEmbed = TradingViewEmbed;\nTradingViewEmbed.propTypes = {\n  widgetType: _propTypes.PropTypes.oneOf([\"ADVANCED_CHART\", \"COMPANY_PROFILE\", \"ECONOMIC_CALENDAR\", \"FOREX_CROSS_RATES\", \"FOREX_HEATMAP\", \"FUNDAMENTAL_DATA\", \"MARKET_DATA\", \"MARKET_OVERVIEW\", \"MINI_CHART\", \"SCREENER\", \"SCREENER_CRYPTOCURRENCY\", \"SYMBOL_INFO\", \"SYMBOL_OVERVIEW\", \"STOCK_MARKET\", \"TECHNICAL_ANALYSIS\", \"TICKER\", \"TICKER_SINGLE\", \"TICKER_TAPE\"]).isRequired,\n  widgetConfig: _propTypes.PropTypes.object,\n  copyrightLink: _propTypes.PropTypes.bool\n};","map":null,"metadata":{},"sourceType":"script"}