{"ast":null,"code":"/*\n Copyright 2012-2015, Yahoo Inc.\n Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.\n */\n'use strict';\n\nfunction percent(covered, total) {\n  let tmp;\n\n  if (total > 0) {\n    tmp = 1000 * 100 * covered / total + 5;\n    return Math.floor(tmp / 10) / 100;\n  } else {\n    return 100.0;\n  }\n}\n\nfunction blankSummary() {\n  const empty = function () {\n    return {\n      total: 0,\n      covered: 0,\n      skipped: 0,\n      pct: 'Unknown'\n    };\n  };\n\n  return {\n    lines: empty(),\n    statements: empty(),\n    functions: empty(),\n    branches: empty()\n  };\n} // asserts that a data object \"looks like\" a summary coverage object\n\n\nfunction assertValidSummary(obj) {\n  const valid = obj && obj.lines && obj.statements && obj.functions && obj.branches;\n\n  if (!valid) {\n    throw new Error('Invalid summary coverage object, missing keys, found:' + Object.keys(obj).join(','));\n  }\n}\n/**\n * CoverageSummary provides a summary of code coverage . It exposes 4 properties,\n * `lines`, `statements`, `branches`, and `functions`. Each of these properties\n * is an object that has 4 keys `total`, `covered`, `skipped` and `pct`.\n * `pct` is a percentage number (0-100).\n * @param {Object|CoverageSummary} [obj=undefined] an optional data object or\n * another coverage summary to initialize this object with.\n * @constructor\n */\n\n\nfunction CoverageSummary(obj) {\n  if (!obj) {\n    this.data = blankSummary();\n  } else if (obj instanceof CoverageSummary) {\n    this.data = obj.data;\n  } else {\n    this.data = obj;\n  }\n\n  assertValidSummary(this.data);\n}\n\n['lines', 'statements', 'functions', 'branches'].forEach(p => {\n  Object.defineProperty(CoverageSummary.prototype, p, {\n    enumerable: true,\n\n    get() {\n      return this.data[p];\n    }\n\n  });\n});\n/**\n * merges a second summary coverage object into this one\n * @param {CoverageSummary} obj - another coverage summary object\n */\n\nCoverageSummary.prototype.merge = function (obj) {\n  const keys = ['lines', 'statements', 'branches', 'functions'];\n  keys.forEach(key => {\n    this[key].total += obj[key].total;\n    this[key].covered += obj[key].covered;\n    this[key].skipped += obj[key].skipped;\n    this[key].pct = percent(this[key].covered, this[key].total);\n  });\n  return this;\n};\n/**\n * returns a POJO that is JSON serializable. May be used to get the raw\n * summary object.\n */\n\n\nCoverageSummary.prototype.toJSON = function () {\n  return this.data;\n};\n/**\n * return true if summary has no lines of code\n */\n\n\nCoverageSummary.prototype.isEmpty = function () {\n  return this.lines.total === 0;\n}; // returns a data object that represents empty coverage\n\n\nfunction emptyCoverage(filePath) {\n  return {\n    path: filePath,\n    statementMap: {},\n    fnMap: {},\n    branchMap: {},\n    s: {},\n    f: {},\n    b: {}\n  };\n} // asserts that a data object \"looks like\" a coverage object\n\n\nfunction assertValidObject(obj) {\n  const valid = obj && obj.path && obj.statementMap && obj.fnMap && obj.branchMap && obj.s && obj.f && obj.b;\n\n  if (!valid) {\n    throw new Error('Invalid file coverage object, missing keys, found:' + Object.keys(obj).join(','));\n  }\n}\n/**\n * provides a read-only view of coverage for a single file.\n * The deep structure of this object is documented elsewhere. It has the following\n * properties:\n *\n * * `path` - the file path for which coverage is being tracked\n * * `statementMap` - map of statement locations keyed by statement index\n * * `fnMap` - map of function metadata keyed by function index\n * * `branchMap` - map of branch metadata keyed by branch index\n * * `s` - hit counts for statements\n * * `f` - hit count for functions\n * * `b` - hit count for branches\n *\n * @param {Object|FileCoverage|String} pathOrObj is a string that initializes\n * and empty coverage object with the specified file path or a data object that\n * has all the required properties for a file coverage object.\n * @constructor\n */\n\n\nfunction FileCoverage(pathOrObj) {\n  if (!pathOrObj) {\n    throw new Error('Coverage must be initialized with a path or an object');\n  }\n\n  if (typeof pathOrObj === 'string') {\n    this.data = emptyCoverage(pathOrObj);\n  } else if (pathOrObj instanceof FileCoverage) {\n    this.data = pathOrObj.data;\n  } else if (typeof pathOrObj === 'object') {\n    this.data = pathOrObj;\n  } else {\n    throw new Error('Invalid argument to coverage constructor');\n  }\n\n  assertValidObject(this.data);\n}\n/**\n * returns computed line coverage from statement coverage.\n * This is a map of hits keyed by line number in the source.\n */\n\n\nFileCoverage.prototype.getLineCoverage = function () {\n  const statementMap = this.data.statementMap;\n  const statements = this.data.s;\n  const lineMap = Object.create(null);\n  Object.keys(statements).forEach(st => {\n    if (!statementMap[st]) {\n      return;\n    }\n\n    const line = statementMap[st].start.line;\n    const count = statements[st];\n    const prevVal = lineMap[line];\n\n    if (prevVal === undefined || prevVal < count) {\n      lineMap[line] = count;\n    }\n  });\n  return lineMap;\n};\n/**\n * returns an array of uncovered line numbers.\n * @returns {Array} an array of line numbers for which no hits have been\n *  collected.\n */\n\n\nFileCoverage.prototype.getUncoveredLines = function () {\n  const lc = this.getLineCoverage();\n  const ret = [];\n  Object.keys(lc).forEach(l => {\n    const hits = lc[l];\n\n    if (hits === 0) {\n      ret.push(l);\n    }\n  });\n  return ret;\n};\n/**\n * returns a map of branch coverage by source line number.\n * @returns {Object} an object keyed by line number. Each object\n * has a `covered`, `total` and `coverage` (percentage) property.\n */\n\n\nFileCoverage.prototype.getBranchCoverageByLine = function () {\n  const branchMap = this.branchMap;\n  const branches = this.b;\n  const ret = {};\n  Object.keys(branchMap).forEach(k => {\n    const line = branchMap[k].line || branchMap[k].loc.start.line;\n    const branchData = branches[k];\n    ret[line] = ret[line] || [];\n    ret[line].push(...branchData);\n  });\n  Object.keys(ret).forEach(k => {\n    const dataArray = ret[k];\n    const covered = dataArray.filter(item => item > 0);\n    const coverage = covered.length / dataArray.length * 100;\n    ret[k] = {\n      covered: covered.length,\n      total: dataArray.length,\n      coverage\n    };\n  });\n  return ret;\n}; // expose coverage data attributes\n\n\n['path', 'statementMap', 'fnMap', 'branchMap', 's', 'f', 'b'].forEach(p => {\n  Object.defineProperty(FileCoverage.prototype, p, {\n    enumerable: true,\n\n    get() {\n      return this.data[p];\n    }\n\n  });\n});\n/**\n * return a JSON-serializable POJO for this file coverage object\n */\n\nFileCoverage.prototype.toJSON = function () {\n  return this.data;\n};\n/**\n * merges a second coverage object into this one, updating hit counts\n * @param {FileCoverage} other - the coverage object to be merged into this one.\n *  Note that the other object should have the same structure as this one (same file).\n */\n\n\nFileCoverage.prototype.merge = function (other) {\n  Object.keys(other.s).forEach(k => {\n    this.data.s[k] += other.s[k];\n  });\n  Object.keys(other.f).forEach(k => {\n    this.data.f[k] += other.f[k];\n  });\n  Object.keys(other.b).forEach(k => {\n    let i;\n    const retArray = this.data.b[k];\n    const secondArray = other.b[k];\n\n    if (!retArray) {\n      this.data.b[k] = secondArray;\n      return;\n    }\n\n    for (i = 0; i < retArray.length; i += 1) {\n      retArray[i] += secondArray[i];\n    }\n  });\n};\n\nFileCoverage.prototype.computeSimpleTotals = function (property) {\n  let stats = this[property];\n  const ret = {\n    total: 0,\n    covered: 0,\n    skipped: 0\n  };\n\n  if (typeof stats === 'function') {\n    stats = stats.call(this);\n  }\n\n  Object.keys(stats).forEach(key => {\n    const covered = !!stats[key];\n    ret.total += 1;\n\n    if (covered) {\n      ret.covered += 1;\n    }\n  });\n  ret.pct = percent(ret.covered, ret.total);\n  return ret;\n};\n\nFileCoverage.prototype.computeBranchTotals = function () {\n  const stats = this.b;\n  const ret = {\n    total: 0,\n    covered: 0,\n    skipped: 0\n  };\n  Object.keys(stats).forEach(key => {\n    const branches = stats[key];\n    let covered;\n    branches.forEach(branchHits => {\n      covered = branchHits > 0;\n\n      if (covered) {\n        ret.covered += 1;\n      }\n    });\n    ret.total += branches.length;\n  });\n  ret.pct = percent(ret.covered, ret.total);\n  return ret;\n};\n/**\n * resets hit counts for all statements, functions and branches\n * in this coverage object resulting in zero coverage.\n */\n\n\nFileCoverage.prototype.resetHits = function () {\n  const statements = this.s;\n  const functions = this.f;\n  const branches = this.b;\n  Object.keys(statements).forEach(s => {\n    statements[s] = 0;\n  });\n  Object.keys(functions).forEach(f => {\n    functions[f] = 0;\n  });\n  Object.keys(branches).forEach(b => {\n    const hits = branches[b];\n    branches[b] = hits.map(() => 0);\n  });\n};\n/**\n * returns a CoverageSummary for this file coverage object\n * @returns {CoverageSummary}\n */\n\n\nFileCoverage.prototype.toSummary = function () {\n  const ret = {};\n  ret.lines = this.computeSimpleTotals('getLineCoverage');\n  ret.functions = this.computeSimpleTotals('f', 'fnMap');\n  ret.statements = this.computeSimpleTotals('s', 'statementMap');\n  ret.branches = this.computeBranchTotals();\n  return new CoverageSummary(ret);\n};\n\nmodule.exports = {\n  CoverageSummary,\n  FileCoverage\n};","map":null,"metadata":{},"sourceType":"script"}