"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.widgetType = exports.TradingViewEmbed = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = require("prop-types");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var WIDGET_LINKS = {
  "ADVANCED_CHART": ["Chart", "https://www.tradingview.com/symbols/"],
  "COMPANY_PROFILE": ["Profile", "https://www.tradingview.com/symbols/"],
  "ECONOMIC_CALENDAR": ["Economic Calendar", "https://www.tradingview.com/markets/currencies/economic-calendar/"],
  "FOREX_CROSS_RATES": ["Forex Rates", "https://www.tradingview.com/markets/currencies/forex-cross-rates/"],
  "FOREX_HEATMAP": ["Forex Heat Map", "https://www.tradingview.com/markets/currencies/forex-heat-map/"],
  "FUNDAMENTAL_DATA": ["Fundamental Data", "https://www.tradingview.com/symbols/"],
  "MARKET_DATA": ["Market Data", "https://www.tradingview.com"],
  "MARKET_OVERVIEW": ["Market Data", "https://www.tradingview.com"],
  "MINI_CHART": ["Rates", "https://www.tradingview.com/symbols/"],
  "SCREENER": ["Forex Screener", "https://www.tradingview.com/forex-screener/"],
  "SCREENER_CRYPTOCURRENCY": ["Cryptocurrency Markets", "https://www.tradingview.com/markets/cryptocurrencies/prices-all/"],
  "SYMBOL_INFO": ["Symbol Info", "https://www.tradingview.com/symbols/"],
  "SYMBOL_OVERVIEW": ["Quotes", "https://www.tradingview.com"],
  "STOCK_MARKET": ["Stock Market", "https://www.tradingview.com/markets/stocks-usa/market-movers-gainers/"],
  "TECHNICAL_ANALYSIS": ["Technical Analysis", "https://www.tradingview.com/symbols/NASDAQ-GOOG/technicals/"],
  "TICKER": ["Quotes", "https://www.tradingview.com"],
  "TICKER_SINGLE": ["Rates", "https://www.tradingview.com/symbols/"],
  "TICKER_TAPE": ["Ticker Tape", "https://www.tradingview.com"]
};
var WIDGETS_URLS = {
  "ADVANCED_CHART": "https://s3.tradingview.com/tv.js",
  "COMPANY_PROFILE": "https://s3.tradingview.com/external-embedding/embed-widget-symbol-profile.js",
  "ECONOMIC_CALENDAR": "https://s3.tradingview.com/external-embedding/embed-widget-events.js",
  "FOREX_CROSS_RATES": "https://s3.tradingview.com/external-embedding/embed-widget-forex-cross-rates.js",
  "FOREX_HEATMAP": "https://s3.tradingview.com/external-embedding/embed-widget-forex-heat-map.js",
  "FUNDAMENTAL_DATA": "https://s3.tradingview.com/external-embedding/embed-widget-financials.js",
  "MARKET_DATA": "https://s3.tradingview.com/external-embedding/embed-widget-market-quotes.js",
  "MARKET_OVERVIEW": "https://s3.tradingview.com/external-embedding/embed-widget-market-overview.js",
  "MINI_CHART": "https://s3.tradingview.com/external-embedding/embed-widget-mini-symbol-overview.js",
  "SCREENER": "https://s3.tradingview.com/external-embedding/embed-widget-screener.js",
  "SCREENER_CRYPTOCURRENCY": "https://s3.tradingview.com/external-embedding/embed-widget-screener.js",
  "SYMBOL_INFO": "https://s3.tradingview.com/external-embedding/embed-widget-symbol-info.js",
  "SYMBOL_OVERVIEW": "https://s3.tradingview.com/tv.js",
  "STOCK_MARKET": "https://s3.tradingview.com/external-embedding/embed-widget-hotlists.js",
  "TECHNICAL_ANALYSIS": "https://s3.tradingview.com/external-embedding/embed-widget-technical-analysis.js",
  "TICKER": "https://s3.tradingview.com/external-embedding/embed-widget-tickers.js",
  "TICKER_SINGLE": "https://s3.tradingview.com/external-embedding/embed-widget-single-quote.js",
  "TICKER_TAPE": "https://s3.tradingview.com/external-embedding/embed-widget-ticker-tape.js"
};

function buildHtml(widgetType) {
  var script = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
  var id = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
  var copyrightLink = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;
  var baseHtml = "<!-- TradingView Widget BEGIN -->";
  baseHtml += "<div class=\"tradingview-widget-container\">";
  baseHtml += id ? "<div id=\"".concat(id, "\"></div>") : "";
  baseHtml += '<div class="tradingview-widget-container__widget"></div>';
  baseHtml += copyrightLink ? "<div class=\"tradingview-widget-copyright\">\n      <a href=\"".concat(WIDGET_LINKS[widgetType][1], "\" rel=\"noopener\" target=\"_blank\">\n        <span class=\"blue-text\">").concat(WIDGET_LINKS[widgetType][0], "</span>\n      </a> by TradingView\n    </div>") : "";
  baseHtml += "<script type=\"text/javascript\" src=\"".concat(WIDGETS_URLS[widgetType], "\" async>");
  baseHtml += script ? "".concat(script, "</script></div>") : "</script></div>";
  baseHtml += "<!-- TradingView Widget END -->";
  return baseHtml;
}

function getTradingViewObj() {
  var widget = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "widget";

  /* global TradingView */
  return TradingView[widget];
}
/*
 *
 * Widgets
 */
// Advanced Chart


function widgetAdvancedChart(count, copyrightLink) {
  var widgetHtml = buildHtml("ADVANCED_CHART", null, "tradingview_AC_".concat(count), copyrightLink);
  return widgetHtml;
}

function widgetAdvancedChartOnload(script, count) {
  var widgetConfig = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  var defaultConfigAdvancedChart = {
    "symbol": "NASDAQ:GOOG",
    "timezone": "Etc/UTC",
    "interval": "D",
    "style": "1",
    "toolbar_bg": "#f1f3f6",
    "enable_publishing": false,
    "withdateranges": true,
    "range": "ytd",
    "hide_side_toolbar": false,
    "allow_symbol_change": true,
    "watchlist": false,
    "details": false,
    "hotlist": false,
    "calendar": false,
    "news": false,
    "show_popup_button": true,
    "popup_width": "1000",
    "popup_height": "650",
    "no_referral_id": true,
    "referral_id": "",
    "width": 980,
    "height": 610,
    "colorTheme": "light",
    "locale": "en",
    "autosize": false
  };
  var config = Object.assign(defaultConfigAdvancedChart, widgetConfig);
  var symbol = config.symbol,
      timezone = config.timezone,
      interval = config.interval,
      style = config.style,
      toolbar_bg = config.toolbar_bg,
      enable_publishing = config.enable_publishing,
      withdateranges = config.withdateranges,
      range = config.range,
      hide_side_toolbar = config.hide_side_toolbar,
      allow_symbol_change = config.allow_symbol_change,
      details = config.details,
      hotlist = config.hotlist,
      calendar = config.calendar,
      show_popup_button = config.show_popup_button,
      popup_width = config.popup_width,
      popup_height = config.popup_height,
      no_referral_id = config.no_referral_id,
      referral_id = config.referral_id,
      width = config.width,
      height = config.height,
      colorTheme = config.colorTheme,
      locale = config.locale,
      autosize = config.autosize,
      news = config.news,
      studies = config.studies,
      watchlist = config.watchlist;
  no_referral_id = referral_id === "" ? true : false;
  var refKey = no_referral_id ? "no_referral_id" : "referral_id";
  var refId = no_referral_id ? true : referral_id;

  if (autosize) {
    width = "100%";
    height = "100%";
  } // onload


  script.onload = function () {
    if (typeof TradingView === "undefined") {
      return;
    } else {
      var TV = getTradingViewObj();
      var _config = {
        "symbol": symbol,
        "timezone": timezone,
        "interval": interval,
        "style": style,
        "toolbar_bg": toolbar_bg,
        "hide_side_toolbar": hide_side_toolbar,
        "withdateranges": withdateranges,
        "range": range,
        "allow_symbol_change": allow_symbol_change,
        "details": details,
        "hotlist": hotlist,
        "calendar": calendar,
        "news": news,
        "studies": studies,
        "watchlist": watchlist,
        "show_popup_button": show_popup_button,
        "popup_width": popup_width,
        "popup_height": popup_height,
        "width": width,
        "height": height,
        "enable_publishing": enable_publishing,
        "theme": colorTheme,
        "locale": locale,
        "container_id": "tradingview_AC_".concat(count)
      };
      _config[refKey] = refId;
      new TV(_config);
    }
  };
} // Company Profile


function widgetCompanyProfile() {
  var widgetConfig = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var copyrightLink = arguments.length > 1 ? arguments[1] : undefined;
  var defaultConfigCompanyProfile = {
    "symbol": "NASDAQ:GOOG",
    "width": 480,
    "height": 650,
    "colorTheme": "light",
    "isTransparent": false,
    "locale": "en",
    "autosize": false
  };
  var config = Object.assign(defaultConfigCompanyProfile, widgetConfig);
  var symbol = config.symbol,
      width = config.width,
      height = config.height,
      colorTheme = config.colorTheme,
      isTransparent = config.isTransparent,
      locale = config.locale,
      autosize = config.autosize;

  if (autosize) {
    width = "100%";
    height = "100%";
  }

  var widgetHtml = buildHtml("COMPANY_PROFILE", "{\n      \"symbol\": \"".concat(symbol, "\",\n      \"width\": \"").concat(width, "\",\n      \"height\": \"").concat(height, "\",\n      \"colorTheme\": \"").concat(colorTheme, "\",\n      \"isTransparent\": ").concat(isTransparent, ",\n      \"locale\": \"").concat(locale, "\"\n    }"), null, copyrightLink);
  return widgetHtml;
} // Economic Calander


function widgetEconomicCalendar() {
  var widgetConfig = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var copyrightLink = arguments.length > 1 ? arguments[1] : undefined;
  var defaultConfigEconomicCalendar = {
    "width": 510,
    "height": 600,
    "colorTheme": "light",
    "isTransparent": false,
    "locale": "en",
    "importanceFilter": "-1,0,1",
    "autosize": false
  };
  var config = Object.assign(defaultConfigEconomicCalendar, widgetConfig);
  var width = config.width,
      height = config.height,
      colorTheme = config.colorTheme,
      isTransparent = config.isTransparent,
      locale = config.locale,
      autosize = config.autosize,
      importanceFilter = config.importanceFilter;

  if (autosize) {
    width = "100%";
    height = "100%";
  }

  var widgetHtml = buildHtml("ECONOMIC_CALENDAR", "{\n      \"width\": \"".concat(width, "\",\n      \"height\": \"").concat(height, "\",\n      \"colorTheme\": \"").concat(colorTheme, "\",\n      \"isTransparent\": ").concat(isTransparent, ",\n      \"locale\": \"").concat(locale, "\",\n      \"importanceFilter\": \"").concat(importanceFilter, "\"\n    }"), null, copyrightLink);
  return widgetHtml;
} // Forex Cross Rates


function widgetForexCrossRates() {
  var widgetConfig = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var copyrightLink = arguments.length > 1 ? arguments[1] : undefined;
  var defaultConfigForexCrossRates = {
    "currencies": ["EUR", "USD", "JPY", "GBP", "CHF", "AUD", "CAD", "NZD", "CNY"],
    "width": 770,
    "height": 400,
    "locale": "en",
    "autosize": false
  };
  var config = Object.assign(defaultConfigForexCrossRates, widgetConfig);
  var currencies = config.currencies,
      width = config.width,
      height = config.height,
      locale = config.locale,
      autosize = config.autosize;

  if (autosize) {
    width = "100%";
    height = "100%";
  }

  var widgetHtml = buildHtml("FOREX_CROSS_RATES", "{\n      \"currencies\": ".concat(JSON.stringify(currencies), ",\n      \"width\": \"").concat(width, "\",\n      \"height\": \"").concat(height, "\",\n      \"locale\": \"").concat(locale, "\"\n    }"), null, copyrightLink);
  return widgetHtml;
} // Forex Heatmap


function widgetForexHeatmap() {
  var widgetConfig = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var copyrightLink = arguments.length > 1 ? arguments[1] : undefined;
  var defaultConfigForexHeatmap = {
    "currencies": ["EUR", "USD", "JPY", "GBP", "CHF", "AUD", "CAD", "NZD", "CNY"],
    "width": 770,
    "height": 400,
    "locale": "en",
    "autosize": false
  };
  var config = Object.assign(defaultConfigForexHeatmap, widgetConfig);
  var currencies = config.currencies,
      width = config.width,
      height = config.height,
      locale = config.locale,
      autosize = config.autosize;

  if (autosize) {
    width = "100%";
    height = "100%";
  }

  var widgetHtml = buildHtml("FOREX_HEATMAP", "{\n      \"currencies\": ".concat(JSON.stringify(currencies), ",\n      \"width\": \"").concat(width, "\",\n      \"height\": \"").concat(height, "\",\n      \"locale\": \"").concat(locale, "\"\n    }"), null, copyrightLink);
  return widgetHtml;
} // Fundamental Data


function widgetFundamentalData() {
  var widgetConfig = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var copyrightLink = arguments.length > 1 ? arguments[1] : undefined;
  var defaultConfigFundamentalData = {
    "symbol": "NASDAQ:GOOG",
    "largeChartUrl": "",
    "width": 480,
    "height": 830,
    "colorTheme": "light",
    "isTransparent": false,
    "displayMode": "regular",
    "locale": "en",
    "autosize": false
  };
  var config = Object.assign(defaultConfigFundamentalData, widgetConfig);
  var symbol = config.symbol,
      largeChartUrl = config.largeChartUrl,
      width = config.width,
      height = config.height,
      colorTheme = config.colorTheme,
      isTransparent = config.isTransparent,
      displayMode = config.displayMode,
      locale = config.locale,
      autosize = config.autosize;

  if (autosize) {
    width = "100%";
    height = "100%";
  }

  var widgetHtml = buildHtml("FUNDAMENTAL_DATA", "{\n      \"symbol\": \"".concat(symbol, "\",\n      \"largeChartUrl\": \"").concat(largeChartUrl, "\",\n      \"width\": \"").concat(width, "\",\n      \"height\": \"").concat(height, "\",\n      \"colorTheme\": \"").concat(colorTheme, "\",\n      \"isTransparent\": ").concat(isTransparent, ",\n      \"displayMode\": \"").concat(displayMode, "\",\n      \"locale\": \"").concat(locale, "\"\n    }"), null, copyrightLink);
  return widgetHtml;
} // Market Data


function widgetMarketData() {
  var widgetConfig = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var copyrightLink = arguments.length > 1 ? arguments[1] : undefined;
  var defaultConfigMarketData = {
    "symbolsGroups": [{
      "originalName": "Indices",
      "symbols": [{
        "displayName": "S&P 500",
        "name": "OANDA:SPX500USD"
      }, {
        "displayName": "Nasdaq 100",
        "name": "OANDA:NAS100USD"
      }, {
        "displayName": "Dow 30",
        "name": "FOREXCOM:DJI"
      }, {
        "displayName": "Nikkei 225",
        "name": "INDEX:NKY"
      }, {
        "displayName": "DAX Index",
        "name": "INDEX:DEU30"
      }, {
        "displayName": "FTSE 100",
        "name": "OANDA:UK100GBP"
      }],
      "name": "Indices"
    }, {
      "originalName": "Commodities",
      "symbols": [{
        "displayName": "E-Mini S&P",
        "name": "CME_MINI:ES1!"
      }, {
        "displayName": "Euro",
        "name": "CME:6E1!"
      }, {
        "displayName": "Gold",
        "name": "COMEX:GC1!"
      }, {
        "displayName": "Crude Oil",
        "name": "NYMEX:CL1!"
      }, {
        "displayName": "Natural Gas",
        "name": "NYMEX:NG1!"
      }, {
        "displayName": "Corn",
        "name": "CBOT:ZC1!"
      }],
      "name": "Commodities"
    }, {
      "originalName": "Bonds",
      "symbols": [{
        "displayName": "Eurodollar",
        "name": "CME:GE1!"
      }, {
        "displayName": "T-Bond",
        "name": "CBOT:ZB1!"
      }, {
        "displayName": "Ultra T-Bond",
        "name": "CBOT:UB1!"
      }, {
        "displayName": "Euro Bund",
        "name": "EUREX:FGBL1!"
      }, {
        "displayName": "Euro BTP",
        "name": "EUREX:FBTP1!"
      }, {
        "displayName": "Euro BOBL",
        "name": "EUREX:FGBM1!"
      }],
      "name": "Bonds"
    }, {
      "originalName": "Forex",
      "symbols": [{
        "name": "FX:EURUSD"
      }, {
        "name": "FX:GBPUSD"
      }, {
        "name": "FX:USDJPY"
      }, {
        "name": "FX:USDCHF"
      }, {
        "name": "FX:AUDUSD"
      }, {
        "name": "FX:USDCAD"
      }],
      "name": "Forex"
    }],
    "largeChartUrl": "",
    "width": 770,
    "height": 450,
    "locale": "en",
    "autosize": false
  };
  var config = Object.assign(defaultConfigMarketData, widgetConfig);
  var symbolsGroups = config.symbolsGroups,
      largeChartUrl = config.largeChartUrl,
      width = config.width,
      height = config.height,
      locale = config.locale,
      autosize = config.autosize;

  if (autosize) {
    width = "100%";
    height = "100%";
  }

  var widgetHtml = buildHtml("MARKET_DATA", "{\n      \"symbolsGroups\": ".concat(JSON.stringify(symbolsGroups), ",\n      \"largeChartUrl\": \"").concat(largeChartUrl, "\",\n      \"locale\": \"").concat(locale, "\",\n      \"width\": \"").concat(width, "\",\n      \"height\": \"").concat(height, "\"\n    }"), null, copyrightLink);
  return widgetHtml;
} // Market Overview


function widgetMarketOverview() {
  var widgetConfig = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var copyrightLink = arguments.length > 1 ? arguments[1] : undefined;
  var defaultConfigMarketOverview = {
    "tabs": [{
      "title": "Indices",
      "symbols": [{
        "s": "OANDA:SPX500USD",
        "d": "S&P 500"
      }, {
        "s": "OANDA:NAS100USD",
        "d": "Nasdaq 100"
      }, {
        "s": "FOREXCOM:DJI",
        "d": "Dow 30"
      }, {
        "s": "INDEX:NKY",
        "d": "Nikkei 225"
      }, {
        "s": "INDEX:DEU30",
        "d": "DAX Index"
      }, {
        "s": "OANDA:UK100GBP",
        "d": "FTSE 100"
      }],
      "originalTitle": "Indices"
    }, {
      "title": "Commodities",
      "symbols": [{
        "s": "CME_MINI:ES1!",
        "d": "E-Mini S&P"
      }, {
        "s": "CME:6E1!",
        "d": "Euro"
      }, {
        "s": "COMEX:GC1!",
        "d": "Gold"
      }, {
        "s": "NYMEX:CL1!",
        "d": "Crude Oil"
      }, {
        "s": "NYMEX:NG1!",
        "d": "Natural Gas"
      }, {
        "s": "CBOT:ZC1!",
        "d": "Corn"
      }],
      "originalTitle": "Commodities"
    }, {
      "title": "Bonds",
      "symbols": [{
        "s": "CME:GE1!",
        "d": "Eurodollar"
      }, {
        "s": "CBOT:ZB1!",
        "d": "T-Bond"
      }, {
        "s": "CBOT:UB1!",
        "d": "Ultra T-Bond"
      }, {
        "s": "EUREX:FGBL1!",
        "d": "Euro Bund"
      }, {
        "s": "EUREX:FBTP1!",
        "d": "Euro BTP"
      }, {
        "s": "EUREX:FGBM1!",
        "d": "Euro BOBL"
      }],
      "originalTitle": "Bonds"
    }, {
      "title": "Forex",
      "symbols": [{
        "s": "FX:EURUSD"
      }, {
        "s": "FX:GBPUSD"
      }, {
        "s": "FX:USDJPY"
      }, {
        "s": "FX:USDCHF"
      }, {
        "s": "FX:AUDUSD"
      }, {
        "s": "FX:USDCAD"
      }],
      "originalTitle": "Forex"
    }],
    "dateRange": "12m",
    "plotLineColorGrowing": "rgba(33, 150, 243, 1)",
    "plotLineColorFalling": "rgba(33, 150, 243, 1)",
    "gridLineColor": "rgba(233, 233, 234, 1)",
    "scaleFontColor": "rgba(120, 123, 134, 1)",
    "belowLineFillColorGrowing": "rgba(33, 150, 243, 0.12)",
    "belowLineFillColorFalling": "rgba(33, 150, 243, 0.12)",
    "symbolActiveColor": "rgba(33, 150, 243, 0.12)",
    "showChart": true,
    "largeChartUrl": "",
    "width": 400,
    "height": 660,
    "colorTheme": "light",
    "isTransparent": false,
    "displayMode": "regular",
    "locale": "en",
    "autosize": false
  };
  var config = Object.assign(defaultConfigMarketOverview, widgetConfig);
  var tabs = config.tabs,
      dateRange = config.dateRange,
      plotLineColorGrowing = config.plotLineColorGrowing,
      plotLineColorFalling = config.plotLineColorFalling,
      gridLineColor = config.gridLineColor,
      scaleFontColor = config.scaleFontColor,
      belowLineFillColorGrowing = config.belowLineFillColorGrowing,
      belowLineFillColorFalling = config.belowLineFillColorFalling,
      symbolActiveColor = config.symbolActiveColor,
      showChart = config.showChart,
      largeChartUrl = config.largeChartUrl,
      width = config.width,
      height = config.height,
      colorTheme = config.colorTheme,
      isTransparent = config.isTransparent,
      locale = config.locale,
      autosize = config.autosize;

  if (autosize) {
    width = "100%";
    height = "100%";
  }

  var widgetHtml = buildHtml("MARKET_OVERVIEW", "{\n      \"tabs\": ".concat(JSON.stringify(tabs), ",\n      \"dateRange\": \"").concat(dateRange, "\",\n      \"plotLineColorGrowing\": \"").concat(plotLineColorGrowing, "\",\n      \"plotLineColorFalling\": \"").concat(plotLineColorFalling, "\",\n      \"gridLineColor\": \"").concat(gridLineColor, "\",\n      \"scaleFontColor\": \"").concat(scaleFontColor, "\",\n      \"belowLineFillColorGrowing\": \"").concat(belowLineFillColorGrowing, "\",\n      \"belowLineFillColorFalling\": \"").concat(belowLineFillColorFalling, "\",\n      \"symbolActiveColor\": \"").concat(symbolActiveColor, "\",\n      \"showChart\": ").concat(showChart, ",\n      \"largeChartUrl\": \"").concat(largeChartUrl, "\",\n      \"width\": \"").concat(width, "\",\n      \"height\": \"").concat(height, "\",\n      \"colorTheme\": \"").concat(colorTheme, "\",\n      \"isTransparent\": ").concat(isTransparent, ",\n      \"locale\": \"").concat(locale, "\"\n    }"), null, copyrightLink);
  return widgetHtml;
} // Mini Chart


function widgetMiniChart() {
  var widgetConfig = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var copyrightLink = arguments.length > 1 ? arguments[1] : undefined;
  var defaultConfigMiniChart = {
    "symbol": "BITMEX:XBTUSD",
    "dateRange": "12m",
    "trendLineColor": "#37a6ef",
    "underLineColor": "rgba(55, 166, 239, 0.15)",
    "largeChartUrl": "",
    "width": 350,
    "height": 220,
    "colorTheme": "light",
    "isTransparent": false,
    "locale": "en",
    "autosize": false
  };
  var config = Object.assign(defaultConfigMiniChart, widgetConfig);
  var symbol = config.symbol,
      dateRange = config.dateRange,
      trendLineColor = config.trendLineColor,
      underLineColor = config.underLineColor,
      largeChartUrl = config.largeChartUrl,
      width = config.width,
      height = config.height,
      colorTheme = config.colorTheme,
      isTransparent = config.isTransparent,
      locale = config.locale,
      autosize = config.autosize;

  if (autosize) {
    width = "100%";
    height = "100%";
  }

  if (colorTheme === "dark") {
    underLineColor = "rgba(55, 166, 239, 0.15)";
  }

  var widgetHtml = buildHtml("MINI_CHART", "{\n      \"symbol\": \"".concat(symbol, "\",\n      \"dateRange\": \"").concat(dateRange, "\",\n      \"trendLineColor\": \"").concat(trendLineColor, "\",\n      \"underLineColor\": \"").concat(underLineColor, "\",\n      \"largeChartUrl\": \"").concat(largeChartUrl, "\",\n      \"width\": \"").concat(width, "\",\n      \"height\": \"").concat(height, "\",\n      \"colorTheme\": \"").concat(colorTheme, "\",\n      \"isTransparent\": ").concat(isTransparent, ",\n      \"locale\": \"").concat(locale, "\"\n    }"), null, copyrightLink);
  return widgetHtml;
} // Screener


function widgetScreener() {
  var widgetConfig = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var copyrightLink = arguments.length > 1 ? arguments[1] : undefined;
  var defaultConfigScreener = {
    "defaultColumn": "overview",
    "defaultScreen": "general",
    "market": "forex",
    "showToolbar": true,
    "largeChartUrl": "",
    "width": 1100,
    "height": 512,
    "colorTheme": "light",
    "isTransparent": false,
    "locale": "en",
    "autosize": false
  };
  var config = Object.assign(defaultConfigScreener, widgetConfig);
  var defaultColumn = config.defaultColumn,
      defaultScreen = config.defaultScreen,
      market = config.market,
      showToolbar = config.showToolbar,
      largeChartUrl = config.largeChartUrl,
      width = config.width,
      height = config.height,
      colorTheme = config.colorTheme,
      isTransparent = config.isTransparent,
      locale = config.locale,
      autosize = config.autosize;

  if (autosize) {
    width = "100%";
    height = "100%";
  }

  var widgetHtml = buildHtml("SCREENER", "{\n      \"defaultColumn\": \"".concat(defaultColumn, "\",\n      \"defaultScreen\": \"").concat(defaultScreen, "\",\n      \"market\": \"").concat(market, "\",\n      \"showToolbar\": ").concat(showToolbar, ",\n      \"largeChartUrl\": \"").concat(largeChartUrl, "\",\n      \"width\": \"").concat(width, "\",\n      \"height\": \"").concat(height, "\",\n      \"colorTheme\": \"").concat(colorTheme, "\",\n      \"isTransparent\": ").concat(isTransparent, ",\n      \"locale\": \"").concat(locale, "\"\n    }"), null, copyrightLink);
  return widgetHtml;
} // Screener Cryptocurrency


function widgetScreenerCryptocurrrency() {
  var widgetConfig = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var copyrightLink = arguments.length > 1 ? arguments[1] : undefined;
  var defaultConfigScreenerCryptocurrrency = {
    "defaultColumn": "overview",
    "screener_type": "crypto_mkt",
    "displayCurrency": "BTC",
    "width": 1000,
    "height": 490,
    "colorTheme": "light",
    "isTransparent": false,
    "locale": "en",
    "autosize": false
  };
  var config = Object.assign(defaultConfigScreenerCryptocurrrency, widgetConfig);
  var defaultColumn = config.defaultColumn,
      screener_type = config.screener_type,
      displayCurrency = config.displayCurrency,
      width = config.width,
      height = config.height,
      colorTheme = config.colorTheme,
      isTransparent = config.isTransparent,
      locale = config.locale,
      autosize = config.autosize;

  if (autosize) {
    width = "100%";
    height = "100%";
  }

  var widgetHtml = buildHtml("SCREENER_CRYPTOCURRENCY", "{\n      \"defaultColumn\": \"".concat(defaultColumn, "\",\n      \"screener_type\": \"").concat(screener_type, "\",\n      \"displayCurrency\": \"").concat(displayCurrency, "\",\n      \"width\": \"").concat(width, "\",\n      \"height\": \"").concat(height, "\",\n      \"colorTheme\": \"").concat(colorTheme, "\",\n      \"isTransparent\": ").concat(isTransparent, ",\n      \"locale\": \"").concat(locale, "\"\n    }"), null, copyrightLink);
  return widgetHtml;
} // Symbol Info


function widgetSymbolInfo() {
  var widgetConfig = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var copyrightLink = arguments.length > 1 ? arguments[1] : undefined;
  var defaultConfigSymbolInfo = {
    "symbol": "BITMEX:XBTUSD",
    "width": 1000,
    "colorTheme": "light",
    "isTransparent": false,
    "locale": "en"
  };
  var config = Object.assign(defaultConfigSymbolInfo, widgetConfig);
  var symbol = config.symbol,
      width = config.width,
      colorTheme = config.colorTheme,
      isTransparent = config.isTransparent,
      locale = config.locale;
  var widgetHtml = buildHtml("SYMBOL_INFO", "{\n      \"symbol\": \"".concat(symbol, "\",\n      \"width\": \"").concat(width, "\",\n      \"colorTheme\": \"").concat(colorTheme, "\",\n      \"isTransparent\": ").concat(isTransparent, ",\n      \"locale\": \"").concat(locale, "\"\n    }"), null, copyrightLink);
  return widgetHtml;
} // Symbol Overview


function widgetSymbolOverview(count, copyrightLink) {
  var widgetHtml = buildHtml("SYMBOL_OVERVIEW", null, "tradingview_SO_".concat(count), copyrightLink);
  return widgetHtml;
}

function widgetSymbolOverviewOnload(script, count) {
  var widgetConfig = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  var defaultConfigSymbolOverview = {
    "symbols": [["Apple", "AAPL"], ["Google", "GOOGL"], ["Microsoft", "MSFT"]],
    "greyText": "Quotes by",
    "gridLineColor": "#e9e9ea",
    "fontColor": "#83888D",
    "underLineColor": "#dbeffb",
    "trendLineColor": "#4bafe9",
    "width": "1000",
    "height": "400",
    "locale": "en",
    "chartOnly": false,
    "autosize": false
  };
  var config = Object.assign(defaultConfigSymbolOverview, widgetConfig);
  var symbols = config.symbols,
      greyText = config.greyText,
      gridLineColor = config.gridLineColor,
      fontColor = config.fontColor,
      underLineColor = config.underLineColor,
      trendLineColor = config.trendLineColor,
      width = config.width,
      height = config.height,
      locale = config.locale,
      chartOnly = config.chartOnly,
      autosize = config.autosize;

  if (autosize) {
    width = "100%";
    height = "100%";
  } // onload


  script.onload = function () {
    if (typeof TradingView === "undefined") {
      return;
    } else {
      var TV = getTradingViewObj("MediumWidget");
      var _config2 = {
        "symbols": symbols,
        "greyText": greyText,
        "gridLineColor": gridLineColor,
        "fontColor": fontColor,
        "underLineColor": underLineColor,
        "trendLineColor": trendLineColor,
        "width": width,
        "height": height,
        "locale": locale,
        "chartOnly": chartOnly,
        "container_id": "tradingview_SO_".concat(count)
      };
      new TV(_config2);
    }
  };
} // Stock Market


function widgetStockMarket() {
  var widgetConfig = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var copyrightLink = arguments.length > 1 ? arguments[1] : undefined;
  var defaultConfigStockMarket = {
    "dateRange": "12m",
    "exchange": "US",
    "plotLineColorGrowing": "rgba(33, 150, 243, 1)",
    "plotLineColorFalling": "rgba(33, 150, 243, 1)",
    "gridLineColor": "rgba(240, 243, 250, 1)",
    "scaleFontColor": "rgba(120, 123, 134, 1)",
    "belowLineFillColorGrowing": "rgba(33, 150, 243, 0.12)",
    "belowLineFillColorFalling": "rgba(33, 150, 243, 0.12)",
    "symbolActiveColor": "rgba(33, 150, 243, 0.12)",
    "showChart": true,
    "largeChartUrl": "",
    "width": "400",
    "height": "600",
    "colorTheme": "light",
    "isTransparent": false,
    "locale": "en"
  };
  var config = Object.assign(defaultConfigStockMarket, widgetConfig);
  var dateRange = config.dateRange,
      exchange = config.exchange,
      plotLineColorGrowing = config.plotLineColorGrowing,
      plotLineColorFalling = config.plotLineColorFalling,
      gridLineColor = config.gridLineColor,
      scaleFontColor = config.scaleFontColor,
      belowLineFillColorGrowing = config.belowLineFillColorGrowing,
      belowLineFillColorFalling = config.belowLineFillColorFalling,
      symbolActiveColor = config.symbolActiveColor,
      showChart = config.showChart,
      largeChartUrl = config.largeChartUrl,
      width = config.width,
      height = config.height,
      colorTheme = config.colorTheme,
      isTransparent = config.isTransparent,
      locale = config.locale,
      autosize = config.autosize;

  if (autosize) {
    width = "100%";
    height = "100%";
  }

  if (colorTheme === "dark") {
    plotLineColorGrowing = "rgba(25, 118, 210, 1)";
    plotLineColorFalling = "rgba(25, 118, 210, 1)";
    gridLineColor = "rgba(42, 46, 57, 1)";
  }

  var widgetHtml = buildHtml("STOCK_MARKET", "{\n      \"dateRange\": \"".concat(dateRange, "\",\n      \"exchange\": \"").concat(exchange, "\",\n      \"plotLineColorGrowing\": \"").concat(plotLineColorGrowing, "\",\n      \"plotLineColorFalling\": \"").concat(plotLineColorFalling, "\",\n      \"gridLineColor\": \"").concat(gridLineColor, "\",\n      \"scaleFontColor\": \"").concat(scaleFontColor, "\",\n      \"belowLineFillColorGrowing\": \"").concat(belowLineFillColorGrowing, "\",\n      \"belowLineFillColorFalling\": \"").concat(belowLineFillColorFalling, "\",\n      \"symbolActiveColor\": \"").concat(symbolActiveColor, "\",\n      \"showChart\": ").concat(showChart, ",\n      \"largeChartUrl\": \"").concat(largeChartUrl, "\",\n      \"width\": \"").concat(width, "\",\n      \"height\": \"").concat(height, "\",\n      \"colorTheme\": \"").concat(colorTheme, "\",\n      \"isTransparent\": ").concat(isTransparent, ",\n      \"locale\": \"").concat(locale, "\"\n    }"), null, copyrightLink);
  return widgetHtml;
} // Technical Analysis


function widgetTechnicalAnalysis() {
  var widgetConfig = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var copyrightLink = arguments.length > 1 ? arguments[1] : undefined;
  var defaultConfigTechnicalAnalysis = {
    "symbol": "BTCUSD",
    "showIntervalTabs": true,
    "interval": "1m",
    "largeChartUrl": "",
    "width": "425",
    "height": "450",
    "colorTheme": "light",
    "isTransparent": false,
    "locale": "en",
    "autosize": false
  };
  var config = Object.assign(defaultConfigTechnicalAnalysis, widgetConfig);
  var symbol = config.symbol,
      showIntervalTabs = config.showIntervalTabs,
      interval = config.interval,
      largeChartUrl = config.largeChartUrl,
      width = config.width,
      height = config.height,
      colorTheme = config.colorTheme,
      isTransparent = config.isTransparent,
      locale = config.locale,
      autosize = config.autosize;

  if (autosize) {
    width = "100%";
    height = "100%";
  }

  var widgetHtml = buildHtml("TECHNICAL_ANALYSIS", "{\n      \"symbol\": \"".concat(symbol, "\",\n      \"showIntervalTabs\": ").concat(showIntervalTabs, ",\n      \"interval\": \"").concat(interval, "\",\n      \"largeChartUrl\": \"").concat(largeChartUrl, "\",\n      \"width\": \"").concat(width, "\",\n      \"height\": \"").concat(height, "\",\n      \"colorTheme\": \"").concat(colorTheme, "\",\n      \"isTransparent\": ").concat(isTransparent, ",\n      \"locale\": \"").concat(locale, "\"\n    }"), null, copyrightLink);
  return widgetHtml;
} // Ticker


function widgetTicker() {
  var widgetConfig = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var copyrightLink = arguments.length > 1 ? arguments[1] : undefined;
  var defaultConfigTicker = {
    "symbols": [{
      "title": "XBT/USD",
      "proName": "BITMEX:XBTUSD"
    }, {
      "title": "BTC/USD",
      "proName": "BITSTAMP:BTCUSD"
    }, {
      "title": "ETH/BTC",
      "proName": "BITSTAMP:ETHBTC"
    }],
    "colorTheme": "light",
    "isTransparent": false,
    "locale": "en"
  };
  var config = Object.assign(defaultConfigTicker, widgetConfig);
  var symbols = config.symbols,
      colorTheme = config.colorTheme,
      isTransparent = config.isTransparent,
      locale = config.locale;
  var widgetHtml = buildHtml("TICKER", "{\n      \"symbols\": ".concat(JSON.stringify(symbols), ",\n      \"colorTheme\": \"").concat(colorTheme, "\",\n      \"isTransparent\": ").concat(isTransparent, ",\n      \"locale\": \"").concat(locale, "\"\n    }"), null, copyrightLink);
  return widgetHtml;
} // Ticker Single


function widgetTickerSingle() {
  var widgetConfig = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var copyrightLink = arguments.length > 1 ? arguments[1] : undefined;
  var defaultConfigTickerSingle = {
    "symbol": "BITMEX:XBTUSD",
    "width": 350,
    "colorTheme": "light",
    "isTransparent": false,
    "locale": "en"
  };
  var config = Object.assign(defaultConfigTickerSingle, widgetConfig);
  var symbol = config.symbol,
      width = config.width,
      colorTheme = config.colorTheme,
      isTransparent = config.isTransparent,
      locale = config.locale;
  var widgetHtml = buildHtml("TICKER_SINGLE", "{\n      \"symbol\": \"".concat(symbol, "\",\n      \"width\": \"").concat(width, "\",\n      \"colorTheme\": \"").concat(colorTheme, "\",\n      \"isTransparent\": ").concat(isTransparent, ",\n      \"locale\": \"").concat(locale, "\"\n    }"), null, copyrightLink);
  return widgetHtml;
} // Ticker Tape


function widgetTickerTape() {
  var widgetConfig = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var copyrightLink = arguments.length > 1 ? arguments[1] : undefined;
  var defaultConfigTickerTape = {
    "symbols": [{
      "title": "XBT/USD",
      "proName": "BITMEX:XBTUSD"
    }, {
      "title": "BTC/USD",
      "proName": "BITSTAMP:BTCUSD"
    }, {
      "title": "ETH/BTC",
      "proName": "BITSTAMP:ETHBTC"
    }],
    "colorTheme": "light",
    "isTransparent": false,
    "displayMode": "adaptive",
    "locale": "en"
  };
  var config = Object.assign(defaultConfigTickerTape, widgetConfig);
  var symbols = config.symbols,
      colorTheme = config.colorTheme,
      isTransparent = config.isTransparent,
      displayMode = config.displayMode,
      locale = config.locale;
  var widgetHtml = buildHtml("TICKER_TAPE", "{\n      \"symbols\": ".concat(JSON.stringify(symbols), ",\n      \"colorTheme\": \"").concat(colorTheme, "\",\n      \"isTransparent\": ").concat(isTransparent, ",\n      \"displayMode\": \"").concat(displayMode, "\",\n      \"locale\": \"").concat(locale, "\"\n    }"), null, copyrightLink);
  return widgetHtml;
}
/*
 *
 * React Component
 */


var widgetType = {
  ADVANCED_CHART: "ADVANCED_CHART",
  COMPANY_PROFILE: "COMPANY_PROFILE",
  ECONOMIC_CALENDAR: "ECONOMIC_CALENDAR",
  FOREX_CROSS_RATES: "FOREX_CROSS_RATES",
  FOREX_HEATMAP: "FOREX_HEATMAP",
  FUNDAMENTAL_DATA: "FUNDAMENTAL_DATA",
  MARKET_DATA: "MARKET_DATA",
  MARKET_OVERVIEW: "MARKET_OVERVIEW",
  MINI_CHART: "MINI_CHART",
  SCREENER: "SCREENER",
  SCREENER_CRYPTOCURRENCY: "SCREENER_CRYPTOCURRENCY",
  SYMBOL_INFO: "SYMBOL_INFO",
  SYMBOL_OVERVIEW: "SYMBOL_OVERVIEW",
  STOCK_MARKET: "STOCK_MARKET",
  TECHNICAL_ANALYSIS: "TECHNICAL_ANALYSIS",
  TICKER: "TICKER",
  TICKER_SINGLE: "TICKER_SINGLE",
  TICKER_TAPE: "TICKER_TAPE"
};
exports.widgetType = widgetType;
var WIDGETS_HTML = {
  "ADVANCED_CHART": widgetAdvancedChart,
  "COMPANY_PROFILE": widgetCompanyProfile,
  "ECONOMIC_CALENDAR": widgetEconomicCalendar,
  "FOREX_CROSS_RATES": widgetForexCrossRates,
  "FOREX_HEATMAP": widgetForexHeatmap,
  "FUNDAMENTAL_DATA": widgetFundamentalData,
  "MARKET_DATA": widgetMarketData,
  "MARKET_OVERVIEW": widgetMarketOverview,
  "MINI_CHART": widgetMiniChart,
  "SCREENER": widgetScreener,
  "SCREENER_CRYPTOCURRENCY": widgetScreenerCryptocurrrency,
  "SYMBOL_INFO": widgetSymbolInfo,
  "SYMBOL_OVERVIEW": widgetSymbolOverview,
  "STOCK_MARKET": widgetStockMarket,
  "TECHNICAL_ANALYSIS": widgetTechnicalAnalysis,
  "TICKER": widgetTicker,
  "TICKER_SINGLE": widgetTickerSingle,
  "TICKER_TAPE": widgetTickerTape
};
var ONLOAD = {
  "ADVANCED_CHART": widgetAdvancedChartOnload,
  "SYMBOL_OVERVIEW": widgetSymbolOverviewOnload
};

var TradingViewEmbed =
/*#__PURE__*/
function (_React$Component) {
  _inherits(TradingViewEmbed, _React$Component);

  function TradingViewEmbed(props) {
    var _this;

    _classCallCheck(this, TradingViewEmbed);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(TradingViewEmbed).call(this, props));
    _this.state = {
      widget: {
        id: "".concat(props.widgetType, "_1"),
        html: null
      }
    };
    return _this;
  }

  _createClass(TradingViewEmbed, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      this.setEmbed();
    }
  }, {
    key: "setEmbed",
    value: function setEmbed() {
      var widgetType = this.props.widgetType;
      var widgetConfig = this.props.widgetConfig;
      var elems = document.getElementsByClassName(widgetType);
      var widgetCount = elems.length + 1; // Add script

      var script = document.createElement("script");
      script.src = WIDGETS_URLS[this.props.widgetType];
      var scriptDiv = document.getElementById(this.state.widget.id);
      scriptDiv.className = widgetType;
      scriptDiv.append(script); // Build html

      var html;

      if (widgetType === "ADVANCED_CHART" || widgetType === "SYMBOL_OVERVIEW") {
        html = WIDGETS_HTML[widgetType](widgetCount, this.props.copyrightLink);
        ONLOAD[widgetType](script, widgetCount, widgetConfig);
      } else {
        html = WIDGETS_HTML[widgetType](widgetConfig, this.props.copyrightLink);
      } // Update states


      var widget = this.state.widget;
      widget["id"] = "".concat(widgetType, "_").concat(widgetCount);
      widget["html"] = html;
      this.setState({
        widget: widget
      });
    }
  }, {
    key: "render",
    value: function render() {
      return _react["default"].createElement("div", {
        id: this.state.widget.id,
        dangerouslySetInnerHTML: {
          __html: this.state.widget.html
        },
        style: {
          width: "100%",
          height: "100%"
        }
      });
    }
  }]);

  return TradingViewEmbed;
}(_react["default"].Component);

exports.TradingViewEmbed = TradingViewEmbed;
TradingViewEmbed.propTypes = {
  widgetType: _propTypes.PropTypes.oneOf(["ADVANCED_CHART", "COMPANY_PROFILE", "ECONOMIC_CALENDAR", "FOREX_CROSS_RATES", "FOREX_HEATMAP", "FUNDAMENTAL_DATA", "MARKET_DATA", "MARKET_OVERVIEW", "MINI_CHART", "SCREENER", "SCREENER_CRYPTOCURRENCY", "SYMBOL_INFO", "SYMBOL_OVERVIEW", "STOCK_MARKET", "TECHNICAL_ANALYSIS", "TICKER", "TICKER_SINGLE", "TICKER_TAPE"]).isRequired,
  widgetConfig: _propTypes.PropTypes.object,
  copyrightLink: _propTypes.PropTypes.bool
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,